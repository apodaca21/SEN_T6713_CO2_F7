
SEN_T6713_C02_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004730  08004730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  080047c8  080047c8  000057c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d0  080047d0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047d4  080047d4  000057d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080047d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000060  08004838  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004838  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a630  00000000  00000000  0000608e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ce  00000000  00000000  000106be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  00012090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ce  00000000  00000000  00012828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d0a  00000000  00000000  00012df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab6f  00000000  00000000  00038b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f11c0  00000000  00000000  0004366f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013482f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000230c  00000000  00000000  00134874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00136b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08004718 	.word	0x08004718

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08004718 	.word	0x08004718

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e4:	f000 f9ec 	bl	80009c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fb95 	bl	8000d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f830 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f8f4 	bl	80007dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f888 	bl	8000708 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f8c0 	bl	800077c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rcv_buff, 8);
 80005fc:	2208      	movs	r2, #8
 80005fe:	490e      	ldr	r1, [pc, #56]	@ (8000638 <main+0x58>)
 8000600:	480e      	ldr	r0, [pc, #56]	@ (800063c <main+0x5c>)
 8000602:	f002 f964 	bl	80028ce <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, cmd, cmd_length, 1000);
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <main+0x60>)
 8000608:	881a      	ldrh	r2, [r3, #0]
 800060a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060e:	490d      	ldr	r1, [pc, #52]	@ (8000644 <main+0x64>)
 8000610:	480a      	ldr	r0, [pc, #40]	@ (800063c <main+0x5c>)
 8000612:	f002 f8d3 	bl	80027bc <HAL_UART_Transmit>
	  HAL_Delay(50);
 8000616:	2032      	movs	r0, #50	@ 0x32
 8000618:	f000 fbda 	bl	8000dd0 <HAL_Delay>
	  if(flag_co2 == 1){
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <main+0x68>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d1f0      	bne.n	8000606 <main+0x26>
		  peopleTest(co2);
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <main+0x6c>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f9a5 	bl	8000978 <peopleTest>
		  flag_co2 = 0;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <main+0x68>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, cmd, cmd_length, 1000);
 8000634:	e7e7      	b.n	8000606 <main+0x26>
 8000636:	bf00      	nop
 8000638:	2000018c 	.word	0x2000018c
 800063c:	2000007c 	.word	0x2000007c
 8000640:	20000000 	.word	0x20000000
 8000644:	08004774 	.word	0x08004774
 8000648:	200001a0 	.word	0x200001a0
 800064c:	20000002 	.word	0x20000002

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	@ 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fbda 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <SystemClock_Config+0xb0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xb0>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xb0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <SystemClock_Config+0xb4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a1b      	ldr	r2, [pc, #108]	@ (8000704 <SystemClock_Config+0xb4>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <SystemClock_Config+0xb4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ff73 	bl	80015a8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006c8:	f000 f9a6 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fa0c 	bl	8001b04 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f2:	f000 f991 	bl	8000a18 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 800070e:	4a1a      	ldr	r2, [pc, #104]	@ (8000778 <MX_USART2_UART_Init+0x70>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 8000714:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 800071c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000720:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 800072a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4809      	ldr	r0, [pc, #36]	@ (8000774 <MX_USART2_UART_Init+0x6c>)
 8000750:	f001 ffe6 	bl	8002720 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800075a:	f000 f95d 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2026      	movs	r0, #38	@ 0x26
 8000764:	f000 fc33 	bl	8000fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000768:	2026      	movs	r0, #38	@ 0x26
 800076a:	f000 fc4c 	bl	8001006 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000007c 	.word	0x2000007c
 8000778:	40004400 	.word	0x40004400

0800077c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	@ (80007d8 <MX_USART3_UART_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_USART3_UART_Init+0x58>)
 80007c0:	f001 ffae 	bl	8002720 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f925 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000104 	.word	0x20000104
 80007d8:	40004800 	.word	0x40004800

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_GPIO_Init+0x44>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <MX_GPIO_Init+0x44>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_GPIO_Init+0x44>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <HAL_UART_RxCpltCallback+0x88>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d136      	bne.n	80008a4 <HAL_UART_RxCpltCallback+0x80>
		HAL_UART_Receive_IT(&huart2, rcv_buff, 8);
 8000836:	2208      	movs	r2, #8
 8000838:	491d      	ldr	r1, [pc, #116]	@ (80008b0 <HAL_UART_RxCpltCallback+0x8c>)
 800083a:	481e      	ldr	r0, [pc, #120]	@ (80008b4 <HAL_UART_RxCpltCallback+0x90>)
 800083c:	f002 f847 	bl	80028ce <HAL_UART_Receive_IT>
		if( rcv_buff[0] == 0x15 && rcv_buff[1] == 0x04 && rcv_buff[2] == 0x02) {
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <HAL_UART_RxCpltCallback+0x8c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b15      	cmp	r3, #21
 8000846:	d12d      	bne.n	80008a4 <HAL_UART_RxCpltCallback+0x80>
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <HAL_UART_RxCpltCallback+0x8c>)
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	2b04      	cmp	r3, #4
 800084e:	d129      	bne.n	80008a4 <HAL_UART_RxCpltCallback+0x80>
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <HAL_UART_RxCpltCallback+0x8c>)
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d125      	bne.n	80008a4 <HAL_UART_RxCpltCallback+0x80>
			uint16_t new_co2 = (uint16_t)(rcv_buff[3] << 8 | rcv_buff[4]);
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <HAL_UART_RxCpltCallback+0x8c>)
 800085a:	78db      	ldrb	r3, [r3, #3]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	b21a      	sxth	r2, r3
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <HAL_UART_RxCpltCallback+0x8c>)
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	b21b      	sxth	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b21b      	sxth	r3, r3
 800086a:	81fb      	strh	r3, [r7, #14]

			if( new_co2 != co2 ) {
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_UART_RxCpltCallback+0x94>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	89fa      	ldrh	r2, [r7, #14]
 8000872:	429a      	cmp	r2, r3
 8000874:	d016      	beq.n	80008a4 <HAL_UART_RxCpltCallback+0x80>
				co2 = new_co2;
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <HAL_UART_RxCpltCallback+0x94>)
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	8013      	strh	r3, [r2, #0]
				sprintf(snd_buff, "CO2: %d\r\n", co2);
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_UART_RxCpltCallback+0x94>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	490e      	ldr	r1, [pc, #56]	@ (80008bc <HAL_UART_RxCpltCallback+0x98>)
 8000884:	480e      	ldr	r0, [pc, #56]	@ (80008c0 <HAL_UART_RxCpltCallback+0x9c>)
 8000886:	f003 faa7 	bl	8003dd8 <siprintf>
				HAL_UART_Transmit(&huart3, snd_buff, strlen(snd_buff), 10);
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <HAL_UART_RxCpltCallback+0x9c>)
 800088c:	f7ff fcd8 	bl	8000240 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	230a      	movs	r3, #10
 8000896:	490a      	ldr	r1, [pc, #40]	@ (80008c0 <HAL_UART_RxCpltCallback+0x9c>)
 8000898:	480a      	ldr	r0, [pc, #40]	@ (80008c4 <HAL_UART_RxCpltCallback+0xa0>)
 800089a:	f001 ff8f 	bl	80027bc <HAL_UART_Transmit>
				flag_co2 = 1;
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_UART_RxCpltCallback+0xa4>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40004400 	.word	0x40004400
 80008b0:	2000018c 	.word	0x2000018c
 80008b4:	2000007c 	.word	0x2000007c
 80008b8:	20000002 	.word	0x20000002
 80008bc:	08004730 	.word	0x08004730
 80008c0:	20000194 	.word	0x20000194
 80008c4:	20000104 	.word	0x20000104
 80008c8:	200001a0 	.word	0x200001a0

080008cc <EstimatePeopleCount>:

int EstimatePeopleCount(uint16_t co2_value) {
 80008cc:	b490      	push	{r4, r7}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
    // Definiciones de medias y desviaciones estándar por cantidad de personas
    const float means[] = {651, 3000, 4500, 6000};  // Agrega más si es necesario
 80008d6:	4b25      	ldr	r3, [pc, #148]	@ (800096c <EstimatePeopleCount+0xa0>)
 80008d8:	f107 041c 	add.w	r4, r7, #28
 80008dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float stddevs[] = {312, 621, 800, 900};   // Emparejadas con means[]
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <EstimatePeopleCount+0xa4>)
 80008e4:	f107 040c 	add.w	r4, r7, #12
 80008e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    int count = sizeof(means) / sizeof(means[0]);
 80008ee:	2304      	movs	r3, #4
 80008f0:	633b      	str	r3, [r7, #48]	@ 0x30
    int best_index = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float min_z_score = 10000;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <EstimatePeopleCount+0xa8>)
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    for (int i = 0; i < count; ++i) {
 80008fa:	2300      	movs	r3, #0
 80008fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80008fe:	e02a      	b.n	8000956 <EstimatePeopleCount+0x8a>
        float z = fabs((co2_value - means[i]) / stddevs[i]);
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	ee07 3a90 	vmov	s15, r3
 8000906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800090a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	3340      	adds	r3, #64	@ 0x40
 8000910:	443b      	add	r3, r7
 8000912:	3b24      	subs	r3, #36	@ 0x24
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	ee77 6a67 	vsub.f32	s13, s14, s15
 800091c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	3340      	adds	r3, #64	@ 0x40
 8000922:	443b      	add	r3, r7
 8000924:	3b34      	subs	r3, #52	@ 0x34
 8000926:	ed93 7a00 	vldr	s14, [r3]
 800092a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800092e:	eef0 7ae7 	vabs.f32	s15, s15
 8000932:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        if (z < min_z_score) {
 8000936:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800093a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800093e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000946:	d503      	bpl.n	8000950 <EstimatePeopleCount+0x84>
            min_z_score = z;
 8000948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094a:	63bb      	str	r3, [r7, #56]	@ 0x38
            best_index = i;
 800094c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800094e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < count; ++i) {
 8000950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000952:	3301      	adds	r3, #1
 8000954:	637b      	str	r3, [r7, #52]	@ 0x34
 8000956:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800095a:	429a      	cmp	r2, r3
 800095c:	dbd0      	blt.n	8000900 <EstimatePeopleCount+0x34>
        }
    }

    return best_index + 1; // Porque el índice 0 corresponde a 1 persona
 800095e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000960:	3301      	adds	r3, #1
}
 8000962:	4618      	mov	r0, r3
 8000964:	3740      	adds	r7, #64	@ 0x40
 8000966:	46bd      	mov	sp, r7
 8000968:	bc90      	pop	{r4, r7}
 800096a:	4770      	bx	lr
 800096c:	0800473c 	.word	0x0800473c
 8000970:	0800474c 	.word	0x0800474c
 8000974:	461c4000 	.word	0x461c4000

08000978 <peopleTest>:


static void peopleTest(uint16_t co2_new){
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
	int estimated = EstimatePeopleCount(co2_new);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ffa1 	bl	80008cc <EstimatePeopleCount>
 800098a:	60f8      	str	r0, [r7, #12]
	sprintf(snd_buff, "Est. Personas: %d\r\n\r\n", estimated);
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4909      	ldr	r1, [pc, #36]	@ (80009b4 <peopleTest+0x3c>)
 8000990:	4809      	ldr	r0, [pc, #36]	@ (80009b8 <peopleTest+0x40>)
 8000992:	f003 fa21 	bl	8003dd8 <siprintf>
	HAL_UART_Transmit(&huart3, snd_buff, strlen(snd_buff), 10);
 8000996:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <peopleTest+0x40>)
 8000998:	f7ff fc52 	bl	8000240 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	230a      	movs	r3, #10
 80009a2:	4905      	ldr	r1, [pc, #20]	@ (80009b8 <peopleTest+0x40>)
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <peopleTest+0x44>)
 80009a6:	f001 ff09 	bl	80027bc <HAL_UART_Transmit>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	0800475c 	.word	0x0800475c
 80009b8:	20000194 	.word	0x20000194
 80009bc:	20000104 	.word	0x20000104

080009c0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009d2:	f000 fb33 	bl	800103c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009da:	2300      	movs	r3, #0
 80009dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009e2:	231f      	movs	r3, #31
 80009e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009e6:	2387      	movs	r3, #135	@ 0x87
 80009e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009ee:	2300      	movs	r3, #0
 80009f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a02:	463b      	mov	r3, r7
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fb51 	bl	80010ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f000 fb2e 	bl	800106c <HAL_MPU_Enable>

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <Error_Handler+0x8>

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0b0      	sub	sp, #192	@ 0xc0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2290      	movs	r2, #144	@ 0x90
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 f9c3 	bl	8003e18 <memset>
  if(huart->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a46      	ldr	r2, [pc, #280]	@ (8000bb0 <HAL_UART_MspInit+0x144>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d143      	bne.n	8000b24 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fa11 	bl	8001ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ffb0 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	4a3d      	ldr	r2, [pc, #244]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad0:	4b38      	ldr	r3, [pc, #224]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	4a37      	ldr	r2, [pc, #220]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8000adc:	4b35      	ldr	r3, [pc, #212]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ae8:	2360      	movs	r3, #96	@ 0x60
 8000aea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b00:	2307      	movs	r3, #7
 8000b02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b06:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	482a      	ldr	r0, [pc, #168]	@ (8000bb8 <HAL_UART_MspInit+0x14c>)
 8000b0e:	f000 fb9f 	bl	8001250 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2026      	movs	r0, #38	@ 0x26
 8000b18:	f000 fa59 	bl	8000fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b1c:	2026      	movs	r0, #38	@ 0x26
 8000b1e:	f000 fa72 	bl	8001006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b22:	e041      	b.n	8000ba8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <HAL_UART_MspInit+0x150>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13c      	bne.n	8000ba8 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b32:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f9c7 	bl	8001ed0 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000b48:	f7ff ff66 	bl	8000a18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	4a18      	ldr	r2, [pc, #96]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <HAL_UART_MspInit+0x148>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b96:	2307      	movs	r3, #7
 8000b98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <HAL_UART_MspInit+0x14c>)
 8000ba4:	f000 fb54 	bl	8001250 <HAL_GPIO_Init>
}
 8000ba8:	bf00      	nop
 8000baa:	37c0      	adds	r7, #192	@ 0xc0
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	40004800 	.word	0x40004800

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f8bb 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <USART2_IRQHandler+0x10>)
 8000c26:	f001 fe97 	bl	8002958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000007c 	.word	0x2000007c

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f003 f8e0 	bl	8003e28 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20080000 	.word	0x20080000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	200001a4 	.word	0x200001a4
 8000c9c:	200002f8 	.word	0x200002f8

08000ca0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f003 f89f 	bl	8003e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc73 	bl	80005e0 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d08:	080047d8 	.word	0x080047d8
  ldr r2, =_sbss
 8000d0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d10:	200002f4 	.word	0x200002f4

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>

08000d16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f000 f94c 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d20:	200f      	movs	r0, #15
 8000d22:	f000 f805 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d26:	f7ff fe7d 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f967 	bl	8001022 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f92f 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000004 	.word	0x20000004
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	200001a8 	.word	0x200001a8

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200001a8 	.word	0x200001a8

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000000c 	.word	0x2000000c

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <__NVIC_SetPriorityGrouping+0x40>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	05fa0000 	.word	0x05fa0000

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	@ (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	@ (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	@ (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	@ 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff29 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff3e 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff8e 	bl	8000f0c <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff31 	bl	8000e7c <__NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffa2 	bl	8000f74 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001040:	f3bf 8f5f 	dmb	sy
}
 8001044:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <HAL_MPU_Disable+0x28>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_MPU_Disable+0x28>)
 800104c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001050:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_MPU_Disable+0x2c>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	e000ed90 	.word	0xe000ed90

0800106c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001074:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <HAL_MPU_Enable+0x38>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_MPU_Enable+0x3c>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_MPU_Enable+0x3c>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001088:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800108a:	f3bf 8f4f 	dsb	sy
}
 800108e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001090:	f3bf 8f6f 	isb	sy
}
 8001094:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed90 	.word	0xe000ed90
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	785a      	ldrb	r2, [r3, #1]
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80010c8:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7b1b      	ldrb	r3, [r3, #12]
 80010d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7adb      	ldrb	r3, [r3, #11]
 80010da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7a9b      	ldrb	r3, [r3, #10]
 80010e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7b5b      	ldrb	r3, [r3, #13]
 80010ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7b9b      	ldrb	r3, [r3, #14]
 80010f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7bdb      	ldrb	r3, [r3, #15]
 80010fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a5b      	ldrb	r3, [r3, #9]
 8001102:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7a1b      	ldrb	r3, [r3, #8]
 800110a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800110c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001116:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001118:	6113      	str	r3, [r2, #16]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed90 	.word	0xe000ed90

0800112c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001138:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800113a:	f7ff fe3d 	bl	8000db8 <HAL_GetTick>
 800113e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d008      	beq.n	800115e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e052      	b.n	8001204 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0216 	bic.w	r2, r2, #22
 800116c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800117c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	2b00      	cmp	r3, #0
 8001184:	d103      	bne.n	800118e <HAL_DMA_Abort+0x62>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0208 	bic.w	r2, r2, #8
 800119c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ae:	e013      	b.n	80011d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011b0:	f7ff fe02 	bl	8000db8 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d90c      	bls.n	80011d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2220      	movs	r2, #32
 80011c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e015      	b.n	8001204 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e4      	bne.n	80011b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ea:	223f      	movs	r2, #63	@ 0x3f
 80011ec:	409a      	lsls	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d004      	beq.n	800122a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2280      	movs	r2, #128	@ 0x80
 8001224:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00c      	b.n	8001244 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2205      	movs	r2, #5
 800122e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e175      	b.n	800155c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8164 	bne.w	8001556 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x56>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80be 	beq.w	8001556 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	4b66      	ldr	r3, [pc, #408]	@ (8001574 <HAL_GPIO_Init+0x324>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a65      	ldr	r2, [pc, #404]	@ (8001574 <HAL_GPIO_Init+0x324>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b63      	ldr	r3, [pc, #396]	@ (8001574 <HAL_GPIO_Init+0x324>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013f2:	4a61      	ldr	r2, [pc, #388]	@ (8001578 <HAL_GPIO_Init+0x328>)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a58      	ldr	r2, [pc, #352]	@ (800157c <HAL_GPIO_Init+0x32c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d037      	beq.n	800148e <HAL_GPIO_Init+0x23e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a57      	ldr	r2, [pc, #348]	@ (8001580 <HAL_GPIO_Init+0x330>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d031      	beq.n	800148a <HAL_GPIO_Init+0x23a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a56      	ldr	r2, [pc, #344]	@ (8001584 <HAL_GPIO_Init+0x334>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d02b      	beq.n	8001486 <HAL_GPIO_Init+0x236>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a55      	ldr	r2, [pc, #340]	@ (8001588 <HAL_GPIO_Init+0x338>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d025      	beq.n	8001482 <HAL_GPIO_Init+0x232>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a54      	ldr	r2, [pc, #336]	@ (800158c <HAL_GPIO_Init+0x33c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01f      	beq.n	800147e <HAL_GPIO_Init+0x22e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a53      	ldr	r2, [pc, #332]	@ (8001590 <HAL_GPIO_Init+0x340>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d019      	beq.n	800147a <HAL_GPIO_Init+0x22a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a52      	ldr	r2, [pc, #328]	@ (8001594 <HAL_GPIO_Init+0x344>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d013      	beq.n	8001476 <HAL_GPIO_Init+0x226>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a51      	ldr	r2, [pc, #324]	@ (8001598 <HAL_GPIO_Init+0x348>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00d      	beq.n	8001472 <HAL_GPIO_Init+0x222>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a50      	ldr	r2, [pc, #320]	@ (800159c <HAL_GPIO_Init+0x34c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d007      	beq.n	800146e <HAL_GPIO_Init+0x21e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4f      	ldr	r2, [pc, #316]	@ (80015a0 <HAL_GPIO_Init+0x350>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_GPIO_Init+0x21a>
 8001466:	2309      	movs	r3, #9
 8001468:	e012      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800146a:	230a      	movs	r3, #10
 800146c:	e010      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800146e:	2308      	movs	r3, #8
 8001470:	e00e      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001472:	2307      	movs	r3, #7
 8001474:	e00c      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001476:	2306      	movs	r3, #6
 8001478:	e00a      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800147a:	2305      	movs	r3, #5
 800147c:	e008      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800147e:	2304      	movs	r3, #4
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x240>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x240>
 800148e:	2300      	movs	r3, #0
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014a0:	4935      	ldr	r1, [pc, #212]	@ (8001578 <HAL_GPIO_Init+0x328>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a34      	ldr	r2, [pc, #208]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a29      	ldr	r2, [pc, #164]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001502:	4b28      	ldr	r3, [pc, #160]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001526:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152c:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <HAL_GPIO_Init+0x354>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	f67f ae86 	bls.w	8001270 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40021400 	.word	0x40021400
 8001594:	40021800 	.word	0x40021800
 8001598:	40021c00 	.word	0x40021c00
 800159c:	40022000 	.word	0x40022000
 80015a0:	40022400 	.word	0x40022400
 80015a4:	40013c00 	.word	0x40013c00

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e29b      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 8087 	beq.w	80016da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015cc:	4b96      	ldr	r3, [pc, #600]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d00c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d8:	4b93      	ldr	r3, [pc, #588]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d112      	bne.n	800160a <HAL_RCC_OscConfig+0x62>
 80015e4:	4b90      	ldr	r3, [pc, #576]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015f0:	d10b      	bne.n	800160a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d06c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x130>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d168      	bne.n	80016d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e275      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x7a>
 8001614:	4b84      	ldr	r3, [pc, #528]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a83      	ldr	r2, [pc, #524]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800161a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e02e      	b.n	8001680 <HAL_RCC_OscConfig+0xd8>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x9c>
 800162a:	4b7f      	ldr	r3, [pc, #508]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7e      	ldr	r2, [pc, #504]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b7c      	ldr	r3, [pc, #496]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a7b      	ldr	r2, [pc, #492]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800163c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e01d      	b.n	8001680 <HAL_RCC_OscConfig+0xd8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0xc0>
 800164e:	4b76      	ldr	r3, [pc, #472]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a75      	ldr	r2, [pc, #468]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b73      	ldr	r3, [pc, #460]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a72      	ldr	r2, [pc, #456]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0xd8>
 8001668:	4b6f      	ldr	r3, [pc, #444]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b6c      	ldr	r3, [pc, #432]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6b      	ldr	r2, [pc, #428]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fb96 	bl	8000db8 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fb92 	bl	8000db8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	@ 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e229      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a2:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb82 	bl	8000db8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb7e 	bl	8000db8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e215      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ca:	4b57      	ldr	r3, [pc, #348]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x110>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d069      	beq.n	80017ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e6:	4b50      	ldr	r3, [pc, #320]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d11c      	bne.n	8001738 <HAL_RCC_OscConfig+0x190>
 80016fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_RCC_OscConfig+0x17a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e1e9      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001722:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	493d      	ldr	r1, [pc, #244]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	e040      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d023      	beq.n	8001788 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001740:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fb34 	bl	8000db8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff fb30 	bl	8000db8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1c7      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4929      	ldr	r1, [pc, #164]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a26      	ldr	r2, [pc, #152]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fb10 	bl	8000db8 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fb0c 	bl	8000db8 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1a3      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d038      	beq.n	8001838 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d019      	beq.n	8001802 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80017d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d2:	4a15      	ldr	r2, [pc, #84]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017da:	f7ff faed 	bl	8000db8 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fae9 	bl	8000db8 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e180      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 80017f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x23a>
 8001800:	e01a      	b.n	8001838 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001806:	4a08      	ldr	r2, [pc, #32]	@ (8001828 <HAL_RCC_OscConfig+0x280>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fad3 	bl	8000db8 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001814:	e00a      	b.n	800182c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001816:	f7ff facf 	bl	8000db8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d903      	bls.n	800182c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e166      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
 8001828:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b92      	ldr	r3, [pc, #584]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ee      	bne.n	8001816 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a4 	beq.w	800198e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b8c      	ldr	r3, [pc, #560]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b89      	ldr	r3, [pc, #548]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	4a88      	ldr	r2, [pc, #544]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	@ 0x40
 800185e:	4b86      	ldr	r3, [pc, #536]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186e:	4b83      	ldr	r3, [pc, #524]	@ (8001a7c <HAL_RCC_OscConfig+0x4d4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800187a:	4b80      	ldr	r3, [pc, #512]	@ (8001a7c <HAL_RCC_OscConfig+0x4d4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7f      	ldr	r2, [pc, #508]	@ (8001a7c <HAL_RCC_OscConfig+0x4d4>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7ff fa97 	bl	8000db8 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7ff fa93 	bl	8000db8 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	@ 0x64
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e12a      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a0:	4b76      	ldr	r3, [pc, #472]	@ (8001a7c <HAL_RCC_OscConfig+0x4d4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x31a>
 80018b4:	4b70      	ldr	r3, [pc, #448]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b8:	4a6f      	ldr	r2, [pc, #444]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c0:	e02d      	b.n	800191e <HAL_RCC_OscConfig+0x376>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x33c>
 80018ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d6:	4b68      	ldr	r3, [pc, #416]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018da:	4a67      	ldr	r2, [pc, #412]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e2:	e01c      	b.n	800191e <HAL_RCC_OscConfig+0x376>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d10c      	bne.n	8001906 <HAL_RCC_OscConfig+0x35e>
 80018ec:	4b62      	ldr	r3, [pc, #392]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f0:	4a61      	ldr	r2, [pc, #388]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a5e      	ldr	r2, [pc, #376]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	e00b      	b.n	800191e <HAL_RCC_OscConfig+0x376>
 8001906:	4b5c      	ldr	r3, [pc, #368]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	4a5b      	ldr	r2, [pc, #364]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6713      	str	r3, [r2, #112]	@ 0x70
 8001912:	4b59      	ldr	r3, [pc, #356]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a58      	ldr	r2, [pc, #352]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d015      	beq.n	8001952 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff fa47 	bl	8000db8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff fa43 	bl	8000db8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0d8      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	4b4c      	ldr	r3, [pc, #304]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ee      	beq.n	800192e <HAL_RCC_OscConfig+0x386>
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff fa31 	bl	8000db8 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff fa2d 	bl	8000db8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e0c2      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d105      	bne.n	800198e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b3d      	ldr	r3, [pc, #244]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a3c      	ldr	r2, [pc, #240]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80ae 	beq.w	8001af4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d06d      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d14b      	bne.n	8001a44 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a31      	ldr	r2, [pc, #196]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff f9fe 	bl	8000db8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f9fa 	bl	8000db8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e091      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	019b      	lsls	r3, r3, #6
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f4:	085b      	lsrs	r3, r3, #1
 80019f6:	3b01      	subs	r3, #1
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	071b      	lsls	r3, r3, #28
 8001a0a:	491b      	ldr	r1, [pc, #108]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a18      	ldr	r2, [pc, #96]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f9cc 	bl	8000db8 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f9c8 	bl	8000db8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e05f      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x47c>
 8001a42:	e057      	b.n	8001af4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f9b2 	bl	8000db8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f9ae 	bl	8000db8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e045      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6a:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_RCC_OscConfig+0x4d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4b0>
 8001a76:	e03d      	b.n	8001af4 <HAL_RCC_OscConfig+0x54c>
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <HAL_RCC_OscConfig+0x558>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d030      	beq.n	8001af0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d129      	bne.n	8001af0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d122      	bne.n	8001af0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ab6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d119      	bne.n	8001af0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d10f      	bne.n	8001af0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ada:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0d0      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d910      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b67      	ldr	r3, [pc, #412]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 020f 	bic.w	r2, r3, #15
 8001b32:	4965      	ldr	r1, [pc, #404]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b63      	ldr	r3, [pc, #396]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0b8      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b64:	4b59      	ldr	r3, [pc, #356]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4a58      	ldr	r2, [pc, #352]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a52      	ldr	r2, [pc, #328]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b50      	ldr	r3, [pc, #320]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	494d      	ldr	r1, [pc, #308]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d040      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b47      	ldr	r3, [pc, #284]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d115      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e07f      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e073      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06b      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	4b39      	ldr	r3, [pc, #228]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f023 0203 	bic.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4936      	ldr	r1, [pc, #216]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f8de 	bl	8000db8 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c00:	f7ff f8da 	bl	8000db8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e053      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 020c 	and.w	r2, r3, #12
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d1eb      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c28:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d210      	bcs.n	8001c58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 020f 	bic.w	r2, r3, #15
 8001c3e:	4922      	ldr	r1, [pc, #136]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e032      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c64:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4916      	ldr	r1, [pc, #88]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d009      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	490e      	ldr	r1, [pc, #56]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c96:	f000 f821 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	490a      	ldr	r1, [pc, #40]	@ (8001cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ca8:	5ccb      	ldrb	r3, [r1, r3]
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1d4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f83a 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	0800477c 	.word	0x0800477c
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce0:	b090      	sub	sp, #64	@ 0x40
 8001ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cec:	2300      	movs	r3, #0
 8001cee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf4:	4b59      	ldr	r3, [pc, #356]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d00d      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x40>
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	f200 80a1 	bhi.w	8001e48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d0e:	e09b      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b53      	ldr	r3, [pc, #332]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d14:	e09b      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d16:	4b53      	ldr	r3, [pc, #332]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d1a:	e098      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d26:	4b4d      	ldr	r3, [pc, #308]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d028      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	2200      	movs	r2, #0
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d44:	2100      	movs	r1, #0
 8001d46:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d48:	fb03 f201 	mul.w	r2, r3, r1
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	fb00 f303 	mul.w	r3, r0, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	4a43      	ldr	r2, [pc, #268]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d56:	fba0 1202 	umull	r1, r2, r0, r2
 8001d5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d62:	4413      	add	r3, r2
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	61fa      	str	r2, [r7, #28]
 8001d6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d76:	f7fe fabb 	bl	80002f0 <__aeabi_uldivmod>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4613      	mov	r3, r2
 8001d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d82:	e053      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d84:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	617a      	str	r2, [r7, #20]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d96:	f04f 0b00 	mov.w	fp, #0
 8001d9a:	4652      	mov	r2, sl
 8001d9c:	465b      	mov	r3, fp
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	0159      	lsls	r1, r3, #5
 8001da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dac:	0150      	lsls	r0, r2, #5
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ebb2 080a 	subs.w	r8, r2, sl
 8001db6:	eb63 090b 	sbc.w	r9, r3, fp
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dce:	ebb2 0408 	subs.w	r4, r2, r8
 8001dd2:	eb63 0509 	sbc.w	r5, r3, r9
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	00eb      	lsls	r3, r5, #3
 8001de0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de4:	00e2      	lsls	r2, r4, #3
 8001de6:	4614      	mov	r4, r2
 8001de8:	461d      	mov	r5, r3
 8001dea:	eb14 030a 	adds.w	r3, r4, sl
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	eb45 030b 	adc.w	r3, r5, fp
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e02:	4629      	mov	r1, r5
 8001e04:	028b      	lsls	r3, r1, #10
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	028a      	lsls	r2, r1, #10
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e16:	2200      	movs	r2, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	60fa      	str	r2, [r7, #12]
 8001e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e20:	f7fe fa66 	bl	80002f0 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3740      	adds	r7, #64	@ 0x40
 8001e54:	46bd      	mov	sp, r7
 8001e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	017d7840 	.word	0x017d7840

08001e68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4903      	ldr	r1, [pc, #12]	@ (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	0800478c 	.word	0x0800478c

08001ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eac:	f7ff ffdc 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0b5b      	lsrs	r3, r3, #13
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	@ (8001ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	0800478c 	.word	0x0800478c

08001ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ef8:	4b69      	ldr	r3, [pc, #420]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4a68      	ldr	r2, [pc, #416]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f02:	6093      	str	r3, [r2, #8]
 8001f04:	4b66      	ldr	r3, [pc, #408]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0c:	4964      	ldr	r1, [pc, #400]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d017      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f38:	4959      	ldr	r1, [pc, #356]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f48:	d101      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d017      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f66:	4b4e      	ldr	r3, [pc, #312]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	494a      	ldr	r1, [pc, #296]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f84:	d101      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 808b 	beq.w	80020ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	4a39      	ldr	r2, [pc, #228]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc0:	4b37      	ldr	r3, [pc, #220]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fcc:	4b35      	ldr	r3, [pc, #212]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd8:	f7fe feee 	bl	8000db8 <HAL_GetTick>
 8001fdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7fe feea 	bl	8000db8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	@ 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e38f      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ffe:	4b28      	ldr	r3, [pc, #160]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002006:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d035      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d02e      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800201c:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002024:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002026:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202a:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002030:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002032:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002036:	4a1a      	ldr	r2, [pc, #104]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800203e:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d114      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe feb2 	bl	8000db8 <HAL_GetTick>
 8002054:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002056:	e00a      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe feae 	bl	8000db8 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e351      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0ee      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002086:	d111      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002094:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002096:	400b      	ands	r3, r1
 8002098:	4901      	ldr	r1, [pc, #4]	@ (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
 800209e:	e00b      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40007000 	.word	0x40007000
 80020a8:	0ffffcff 	.word	0x0ffffcff
 80020ac:	4bac      	ldr	r3, [pc, #688]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4aab      	ldr	r2, [pc, #684]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80020b6:	6093      	str	r3, [r2, #8]
 80020b8:	4ba9      	ldr	r3, [pc, #676]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	49a6      	ldr	r1, [pc, #664]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020dc:	4aa0      	ldr	r2, [pc, #640]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f0:	499b      	ldr	r1, [pc, #620]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002104:	4b96      	ldr	r3, [pc, #600]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002112:	4993      	ldr	r1, [pc, #588]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002126:	4b8e      	ldr	r3, [pc, #568]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002134:	498a      	ldr	r1, [pc, #552]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002148:	4b85      	ldr	r3, [pc, #532]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002156:	4982      	ldr	r1, [pc, #520]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800216a:	4b7d      	ldr	r3, [pc, #500]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002170:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4979      	ldr	r1, [pc, #484]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800218c:	4b74      	ldr	r3, [pc, #464]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	4971      	ldr	r1, [pc, #452]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b4:	f023 020c 	bic.w	r2, r3, #12
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021bc:	4968      	ldr	r1, [pc, #416]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021d0:	4b63      	ldr	r3, [pc, #396]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	4960      	ldr	r1, [pc, #384]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002200:	4957      	ldr	r1, [pc, #348]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002214:	4b52      	ldr	r3, [pc, #328]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002222:	494f      	ldr	r1, [pc, #316]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002236:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	4946      	ldr	r1, [pc, #280]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002258:	4b41      	ldr	r3, [pc, #260]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002266:	493e      	ldr	r1, [pc, #248]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800227a:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002280:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002288:	4935      	ldr	r1, [pc, #212]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022aa:	492d      	ldr	r1, [pc, #180]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d011      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022be:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022cc:	4924      	ldr	r1, [pc, #144]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022dc:	d101      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002304:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800230c:	4914      	ldr	r1, [pc, #80]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002326:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002330:	490b      	ldr	r1, [pc, #44]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00f      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002354:	4902      	ldr	r1, [pc, #8]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800235c:	e002      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002370:	4b8a      	ldr	r3, [pc, #552]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002376:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002380:	4986      	ldr	r1, [pc, #536]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002394:	4b81      	ldr	r3, [pc, #516]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800239a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023a4:	497d      	ldr	r1, [pc, #500]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d006      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80d6 	beq.w	800256c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023c0:	4b76      	ldr	r3, [pc, #472]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a75      	ldr	r2, [pc, #468]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023cc:	f7fe fcf4 	bl	8000db8 <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023d4:	f7fe fcf0 	bl	8000db8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e195      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023e6:	4b6d      	ldr	r3, [pc, #436]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d021      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11d      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002406:	4b65      	ldr	r3, [pc, #404]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002414:	4b61      	ldr	r3, [pc, #388]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800241a:	0e1b      	lsrs	r3, r3, #24
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	019a      	lsls	r2, r3, #6
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	041b      	lsls	r3, r3, #16
 800242c:	431a      	orrs	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	071b      	lsls	r3, r3, #28
 800243a:	4958      	ldr	r1, [pc, #352]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002460:	2b00      	cmp	r3, #0
 8002462:	d02e      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800246c:	d129      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800246e:	4b4b      	ldr	r3, [pc, #300]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800247c:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002482:	0f1b      	lsrs	r3, r3, #28
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	071b      	lsls	r3, r3, #28
 80024a2:	493e      	ldr	r1, [pc, #248]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024aa:	4b3c      	ldr	r3, [pc, #240]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b0:	f023 021f 	bic.w	r2, r3, #31
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	3b01      	subs	r3, #1
 80024ba:	4938      	ldr	r1, [pc, #224]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01d      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024ce:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024d4:	0e1b      	lsrs	r3, r3, #24
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024dc:	4b2f      	ldr	r3, [pc, #188]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024e2:	0f1b      	lsrs	r3, r3, #28
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	019a      	lsls	r2, r3, #6
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	071b      	lsls	r3, r3, #28
 8002502:	4926      	ldr	r1, [pc, #152]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d011      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	019a      	lsls	r2, r3, #6
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	491a      	ldr	r1, [pc, #104]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800253a:	4b18      	ldr	r3, [pc, #96]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a17      	ldr	r2, [pc, #92]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002540:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002546:	f7fe fc37 	bl	8000db8 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800254e:	f7fe fc33 	bl	8000db8 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	@ 0x64
 800255a:	d901      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0d8      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b01      	cmp	r3, #1
 8002570:	f040 80ce 	bne.w	8002710 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a08      	ldr	r2, [pc, #32]	@ (800259c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800257e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002580:	f7fe fc1a 	bl	8000db8 <HAL_GetTick>
 8002584:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002586:	e00b      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002588:	f7fe fc16 	bl	8000db8 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d904      	bls.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0bb      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025a0:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ac:	d0ec      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d02e      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d12a      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025d6:	4b51      	ldr	r3, [pc, #324]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025e4:	4b4d      	ldr	r3, [pc, #308]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ea:	0f1b      	lsrs	r3, r3, #28
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	019a      	lsls	r2, r3, #6
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	431a      	orrs	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	071b      	lsls	r3, r3, #28
 800260a:	4944      	ldr	r1, [pc, #272]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002612:	4b42      	ldr	r3, [pc, #264]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002618:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	3b01      	subs	r3, #1
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	493d      	ldr	r1, [pc, #244]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d022      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800263c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002640:	d11d      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002642:	4b36      	ldr	r3, [pc, #216]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002648:	0e1b      	lsrs	r3, r3, #24
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002650:	4b32      	ldr	r3, [pc, #200]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002656:	0f1b      	lsrs	r3, r3, #28
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	019a      	lsls	r2, r3, #6
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	071b      	lsls	r3, r3, #28
 8002676:	4929      	ldr	r1, [pc, #164]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d028      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	0e1b      	lsrs	r3, r3, #24
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002698:	4b20      	ldr	r3, [pc, #128]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	0c1b      	lsrs	r3, r3, #16
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	019a      	lsls	r2, r3, #6
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	071b      	lsls	r3, r3, #28
 80026be:	4917      	ldr	r1, [pc, #92]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	4911      	ldr	r1, [pc, #68]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026dc:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0e      	ldr	r2, [pc, #56]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e8:	f7fe fb66 	bl	8000db8 <HAL_GetTick>
 80026ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026f0:	f7fe fb62 	bl	8000db8 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e007      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800270a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800270e:	d1ef      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e040      	b.n	80027b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe f992 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	@ 0x24
 800274c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fe6c 	bl	8003444 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fc05 	bl	8002f7c <UART_SetConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e01b      	b.n	80027b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800278a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800279a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 feeb 	bl	8003588 <UART_CheckIdleState>
 80027b2:	4603      	mov	r3, r0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d177      	bne.n	80028c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_UART_Transmit+0x24>
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e070      	b.n	80028c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2221      	movs	r2, #33	@ 0x21
 80027f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe fae1 	bl	8000db8 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002810:	d108      	bne.n	8002824 <HAL_UART_Transmit+0x68>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d104      	bne.n	8002824 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e003      	b.n	800282c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800282c:	e02f      	b.n	800288e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2200      	movs	r2, #0
 8002836:	2180      	movs	r1, #128	@ 0x80
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 ff4d 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e03b      	b.n	80028c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	3302      	adds	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e007      	b.n	800287c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3301      	adds	r3, #1
 800287a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1c9      	bne.n	800282e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2140      	movs	r1, #64	@ 0x40
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 ff17 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e005      	b.n	80028c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
  }
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b08a      	sub	sp, #40	@ 0x28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	4613      	mov	r3, r2
 80028da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d132      	bne.n	800294c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_UART_Receive_IT+0x24>
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e02b      	b.n	800294e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	613b      	str	r3, [r7, #16]
   return(result);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	69f9      	ldr	r1, [r7, #28]
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	61bb      	str	r3, [r7, #24]
   return(result);
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e6      	bne.n	800290a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	461a      	mov	r2, r3
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 ff36 	bl	80037b4 <UART_Start_Receive_IT>
 8002948:	4603      	mov	r3, r0
 800294a:	e000      	b.n	800294e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3728      	adds	r7, #40	@ 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0ba      	sub	sp, #232	@ 0xe8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800297e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002982:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002986:	4013      	ands	r3, r2
 8002988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800298c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d115      	bne.n	80029c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00f      	beq.n	80029c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 82ac 	beq.w	8002f0e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
      }
      return;
 80029be:	e2a6      	b.n	8002f0e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8117 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029da:	4b85      	ldr	r3, [pc, #532]	@ (8002bf0 <HAL_UART_IRQHandler+0x298>)
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 810a 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_UART_IRQHandler+0xbc>
 80029f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_UART_IRQHandler+0xec>
 8002a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2202      	movs	r2, #2
 8002a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	f043 0204 	orr.w	r2, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d011      	beq.n	8002a74 <HAL_UART_IRQHandler+0x11c>
 8002a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2204      	movs	r2, #4
 8002a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d017      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa6:	f043 0208 	orr.w	r2, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x18a>
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8212 	beq.w	8002f12 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d005      	beq.n	8002b3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04f      	beq.n	8002bda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 ff00 	bl	8003940 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4a:	2b40      	cmp	r3, #64	@ 0x40
 8002b4c:	d141      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3308      	adds	r3, #8
 8002b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3308      	adds	r3, #8
 8002b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1d9      	bne.n	8002b4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba6:	4a13      	ldr	r2, [pc, #76]	@ (8002bf4 <HAL_UART_IRQHandler+0x29c>)
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fb2c 	bl	800120c <HAL_DMA_Abort_IT>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d017      	beq.n	8002bea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	e00f      	b.n	8002bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9b6 	bl	8002f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e00b      	b.n	8002bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9b2 	bl	8002f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e007      	b.n	8002bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9ae 	bl	8002f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002be8:	e193      	b.n	8002f12 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	bf00      	nop
    return;
 8002bec:	e191      	b.n	8002f12 <HAL_UART_IRQHandler+0x5ba>
 8002bee:	bf00      	nop
 8002bf0:	04000120 	.word	0x04000120
 8002bf4:	08003a09 	.word	0x08003a09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 814c 	bne.w	8002e9a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8145 	beq.w	8002e9a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 813e 	beq.w	8002e9a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2210      	movs	r2, #16
 8002c24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c30:	2b40      	cmp	r3, #64	@ 0x40
 8002c32:	f040 80b6 	bne.w	8002da2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8165 	beq.w	8002f16 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c56:	429a      	cmp	r2, r3
 8002c58:	f080 815d 	bcs.w	8002f16 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c70:	f000 8086 	beq.w	8002d80 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ca2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002caa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1da      	bne.n	8002c74 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3308      	adds	r3, #8
 8002cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ce2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e1      	bne.n	8002cbe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1e3      	bne.n	8002cfa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d48:	e853 3f00 	ldrex	r3, [r3]
 8002d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d50:	f023 0310 	bic.w	r3, r3, #16
 8002d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d6a:	e841 2300 	strex	r3, r2, [r1]
 8002d6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1e4      	bne.n	8002d40 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe f9d6 	bl	800112c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8d8 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002da0:	e0b9      	b.n	8002f16 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80ab 	beq.w	8002f1a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8002dc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a6 	beq.w	8002f1a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd6:	e853 3f00 	ldrex	r3, [r3]
 8002dda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002de2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002df2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e4      	bne.n	8002dce <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	623b      	str	r3, [r7, #32]
   return(result);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3308      	adds	r3, #8
 8002e24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e28:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e3      	bne.n	8002e04 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f023 0310 	bic.w	r3, r3, #16
 8002e64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e4      	bne.n	8002e50 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f85c 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e98:	e03f      	b.n	8002f1a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x56c>
 8002ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f853 	bl	8002f68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ec2:	e02d      	b.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00e      	beq.n	8002eee <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01c      	beq.n	8002f1e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
    }
    return;
 8002eec:	e017      	b.n	8002f1e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d012      	beq.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
 8002efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fd94 	bl	8003a34 <UART_EndTransmit_IT>
    return;
 8002f0c:	e008      	b.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e006      	b.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002f12:	bf00      	nop
 8002f14:	e004      	b.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
      return;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <HAL_UART_IRQHandler+0x5c8>
    return;
 8002f1e:	bf00      	nop
  }

}
 8002f20:	37e8      	adds	r7, #232	@ 0xe8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop

08002f28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4ba6      	ldr	r3, [pc, #664]	@ (8003240 <UART_SetConfig+0x2c4>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	6979      	ldr	r1, [r7, #20]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a94      	ldr	r2, [pc, #592]	@ (8003244 <UART_SetConfig+0x2c8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d120      	bne.n	800303a <UART_SetConfig+0xbe>
 8002ff8:	4b93      	ldr	r3, [pc, #588]	@ (8003248 <UART_SetConfig+0x2cc>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b03      	cmp	r3, #3
 8003004:	d816      	bhi.n	8003034 <UART_SetConfig+0xb8>
 8003006:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <UART_SetConfig+0x90>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	0800301d 	.word	0x0800301d
 8003010:	08003029 	.word	0x08003029
 8003014:	08003023 	.word	0x08003023
 8003018:	0800302f 	.word	0x0800302f
 800301c:	2301      	movs	r3, #1
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e150      	b.n	80032c4 <UART_SetConfig+0x348>
 8003022:	2302      	movs	r3, #2
 8003024:	77fb      	strb	r3, [r7, #31]
 8003026:	e14d      	b.n	80032c4 <UART_SetConfig+0x348>
 8003028:	2304      	movs	r3, #4
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e14a      	b.n	80032c4 <UART_SetConfig+0x348>
 800302e:	2308      	movs	r3, #8
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	e147      	b.n	80032c4 <UART_SetConfig+0x348>
 8003034:	2310      	movs	r3, #16
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e144      	b.n	80032c4 <UART_SetConfig+0x348>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a83      	ldr	r2, [pc, #524]	@ (800324c <UART_SetConfig+0x2d0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d132      	bne.n	80030aa <UART_SetConfig+0x12e>
 8003044:	4b80      	ldr	r3, [pc, #512]	@ (8003248 <UART_SetConfig+0x2cc>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d828      	bhi.n	80030a4 <UART_SetConfig+0x128>
 8003052:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <UART_SetConfig+0xdc>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800308d 	.word	0x0800308d
 800305c:	080030a5 	.word	0x080030a5
 8003060:	080030a5 	.word	0x080030a5
 8003064:	080030a5 	.word	0x080030a5
 8003068:	08003099 	.word	0x08003099
 800306c:	080030a5 	.word	0x080030a5
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030a5 	.word	0x080030a5
 8003078:	08003093 	.word	0x08003093
 800307c:	080030a5 	.word	0x080030a5
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080030a5 	.word	0x080030a5
 8003088:	0800309f 	.word	0x0800309f
 800308c:	2300      	movs	r3, #0
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e118      	b.n	80032c4 <UART_SetConfig+0x348>
 8003092:	2302      	movs	r3, #2
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e115      	b.n	80032c4 <UART_SetConfig+0x348>
 8003098:	2304      	movs	r3, #4
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e112      	b.n	80032c4 <UART_SetConfig+0x348>
 800309e:	2308      	movs	r3, #8
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e10f      	b.n	80032c4 <UART_SetConfig+0x348>
 80030a4:	2310      	movs	r3, #16
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e10c      	b.n	80032c4 <UART_SetConfig+0x348>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a68      	ldr	r2, [pc, #416]	@ (8003250 <UART_SetConfig+0x2d4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d120      	bne.n	80030f6 <UART_SetConfig+0x17a>
 80030b4:	4b64      	ldr	r3, [pc, #400]	@ (8003248 <UART_SetConfig+0x2cc>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030be:	2b30      	cmp	r3, #48	@ 0x30
 80030c0:	d013      	beq.n	80030ea <UART_SetConfig+0x16e>
 80030c2:	2b30      	cmp	r3, #48	@ 0x30
 80030c4:	d814      	bhi.n	80030f0 <UART_SetConfig+0x174>
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d009      	beq.n	80030de <UART_SetConfig+0x162>
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d810      	bhi.n	80030f0 <UART_SetConfig+0x174>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0x15c>
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d006      	beq.n	80030e4 <UART_SetConfig+0x168>
 80030d6:	e00b      	b.n	80030f0 <UART_SetConfig+0x174>
 80030d8:	2300      	movs	r3, #0
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e0f2      	b.n	80032c4 <UART_SetConfig+0x348>
 80030de:	2302      	movs	r3, #2
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e0ef      	b.n	80032c4 <UART_SetConfig+0x348>
 80030e4:	2304      	movs	r3, #4
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e0ec      	b.n	80032c4 <UART_SetConfig+0x348>
 80030ea:	2308      	movs	r3, #8
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e0e9      	b.n	80032c4 <UART_SetConfig+0x348>
 80030f0:	2310      	movs	r3, #16
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e0e6      	b.n	80032c4 <UART_SetConfig+0x348>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a56      	ldr	r2, [pc, #344]	@ (8003254 <UART_SetConfig+0x2d8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d120      	bne.n	8003142 <UART_SetConfig+0x1c6>
 8003100:	4b51      	ldr	r3, [pc, #324]	@ (8003248 <UART_SetConfig+0x2cc>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003106:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800310a:	2bc0      	cmp	r3, #192	@ 0xc0
 800310c:	d013      	beq.n	8003136 <UART_SetConfig+0x1ba>
 800310e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003110:	d814      	bhi.n	800313c <UART_SetConfig+0x1c0>
 8003112:	2b80      	cmp	r3, #128	@ 0x80
 8003114:	d009      	beq.n	800312a <UART_SetConfig+0x1ae>
 8003116:	2b80      	cmp	r3, #128	@ 0x80
 8003118:	d810      	bhi.n	800313c <UART_SetConfig+0x1c0>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <UART_SetConfig+0x1a8>
 800311e:	2b40      	cmp	r3, #64	@ 0x40
 8003120:	d006      	beq.n	8003130 <UART_SetConfig+0x1b4>
 8003122:	e00b      	b.n	800313c <UART_SetConfig+0x1c0>
 8003124:	2300      	movs	r3, #0
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e0cc      	b.n	80032c4 <UART_SetConfig+0x348>
 800312a:	2302      	movs	r3, #2
 800312c:	77fb      	strb	r3, [r7, #31]
 800312e:	e0c9      	b.n	80032c4 <UART_SetConfig+0x348>
 8003130:	2304      	movs	r3, #4
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e0c6      	b.n	80032c4 <UART_SetConfig+0x348>
 8003136:	2308      	movs	r3, #8
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e0c3      	b.n	80032c4 <UART_SetConfig+0x348>
 800313c:	2310      	movs	r3, #16
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e0c0      	b.n	80032c4 <UART_SetConfig+0x348>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a44      	ldr	r2, [pc, #272]	@ (8003258 <UART_SetConfig+0x2dc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d125      	bne.n	8003198 <UART_SetConfig+0x21c>
 800314c:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <UART_SetConfig+0x2cc>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800315a:	d017      	beq.n	800318c <UART_SetConfig+0x210>
 800315c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003160:	d817      	bhi.n	8003192 <UART_SetConfig+0x216>
 8003162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003166:	d00b      	beq.n	8003180 <UART_SetConfig+0x204>
 8003168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316c:	d811      	bhi.n	8003192 <UART_SetConfig+0x216>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <UART_SetConfig+0x1fe>
 8003172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003176:	d006      	beq.n	8003186 <UART_SetConfig+0x20a>
 8003178:	e00b      	b.n	8003192 <UART_SetConfig+0x216>
 800317a:	2300      	movs	r3, #0
 800317c:	77fb      	strb	r3, [r7, #31]
 800317e:	e0a1      	b.n	80032c4 <UART_SetConfig+0x348>
 8003180:	2302      	movs	r3, #2
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e09e      	b.n	80032c4 <UART_SetConfig+0x348>
 8003186:	2304      	movs	r3, #4
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e09b      	b.n	80032c4 <UART_SetConfig+0x348>
 800318c:	2308      	movs	r3, #8
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e098      	b.n	80032c4 <UART_SetConfig+0x348>
 8003192:	2310      	movs	r3, #16
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e095      	b.n	80032c4 <UART_SetConfig+0x348>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2f      	ldr	r2, [pc, #188]	@ (800325c <UART_SetConfig+0x2e0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d125      	bne.n	80031ee <UART_SetConfig+0x272>
 80031a2:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <UART_SetConfig+0x2cc>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031b0:	d017      	beq.n	80031e2 <UART_SetConfig+0x266>
 80031b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031b6:	d817      	bhi.n	80031e8 <UART_SetConfig+0x26c>
 80031b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031bc:	d00b      	beq.n	80031d6 <UART_SetConfig+0x25a>
 80031be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031c2:	d811      	bhi.n	80031e8 <UART_SetConfig+0x26c>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <UART_SetConfig+0x254>
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031cc:	d006      	beq.n	80031dc <UART_SetConfig+0x260>
 80031ce:	e00b      	b.n	80031e8 <UART_SetConfig+0x26c>
 80031d0:	2301      	movs	r3, #1
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e076      	b.n	80032c4 <UART_SetConfig+0x348>
 80031d6:	2302      	movs	r3, #2
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e073      	b.n	80032c4 <UART_SetConfig+0x348>
 80031dc:	2304      	movs	r3, #4
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e070      	b.n	80032c4 <UART_SetConfig+0x348>
 80031e2:	2308      	movs	r3, #8
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e06d      	b.n	80032c4 <UART_SetConfig+0x348>
 80031e8:	2310      	movs	r3, #16
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e06a      	b.n	80032c4 <UART_SetConfig+0x348>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003260 <UART_SetConfig+0x2e4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d138      	bne.n	800326a <UART_SetConfig+0x2ee>
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <UART_SetConfig+0x2cc>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003202:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003206:	d017      	beq.n	8003238 <UART_SetConfig+0x2bc>
 8003208:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800320c:	d82a      	bhi.n	8003264 <UART_SetConfig+0x2e8>
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003212:	d00b      	beq.n	800322c <UART_SetConfig+0x2b0>
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003218:	d824      	bhi.n	8003264 <UART_SetConfig+0x2e8>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <UART_SetConfig+0x2aa>
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003222:	d006      	beq.n	8003232 <UART_SetConfig+0x2b6>
 8003224:	e01e      	b.n	8003264 <UART_SetConfig+0x2e8>
 8003226:	2300      	movs	r3, #0
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e04b      	b.n	80032c4 <UART_SetConfig+0x348>
 800322c:	2302      	movs	r3, #2
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e048      	b.n	80032c4 <UART_SetConfig+0x348>
 8003232:	2304      	movs	r3, #4
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e045      	b.n	80032c4 <UART_SetConfig+0x348>
 8003238:	2308      	movs	r3, #8
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e042      	b.n	80032c4 <UART_SetConfig+0x348>
 800323e:	bf00      	nop
 8003240:	efff69f3 	.word	0xefff69f3
 8003244:	40011000 	.word	0x40011000
 8003248:	40023800 	.word	0x40023800
 800324c:	40004400 	.word	0x40004400
 8003250:	40004800 	.word	0x40004800
 8003254:	40004c00 	.word	0x40004c00
 8003258:	40005000 	.word	0x40005000
 800325c:	40011400 	.word	0x40011400
 8003260:	40007800 	.word	0x40007800
 8003264:	2310      	movs	r3, #16
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e02c      	b.n	80032c4 <UART_SetConfig+0x348>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a72      	ldr	r2, [pc, #456]	@ (8003438 <UART_SetConfig+0x4bc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d125      	bne.n	80032c0 <UART_SetConfig+0x344>
 8003274:	4b71      	ldr	r3, [pc, #452]	@ (800343c <UART_SetConfig+0x4c0>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800327e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003282:	d017      	beq.n	80032b4 <UART_SetConfig+0x338>
 8003284:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003288:	d817      	bhi.n	80032ba <UART_SetConfig+0x33e>
 800328a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800328e:	d00b      	beq.n	80032a8 <UART_SetConfig+0x32c>
 8003290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003294:	d811      	bhi.n	80032ba <UART_SetConfig+0x33e>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <UART_SetConfig+0x326>
 800329a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800329e:	d006      	beq.n	80032ae <UART_SetConfig+0x332>
 80032a0:	e00b      	b.n	80032ba <UART_SetConfig+0x33e>
 80032a2:	2300      	movs	r3, #0
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e00d      	b.n	80032c4 <UART_SetConfig+0x348>
 80032a8:	2302      	movs	r3, #2
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e00a      	b.n	80032c4 <UART_SetConfig+0x348>
 80032ae:	2304      	movs	r3, #4
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e007      	b.n	80032c4 <UART_SetConfig+0x348>
 80032b4:	2308      	movs	r3, #8
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e004      	b.n	80032c4 <UART_SetConfig+0x348>
 80032ba:	2310      	movs	r3, #16
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e001      	b.n	80032c4 <UART_SetConfig+0x348>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032cc:	d15b      	bne.n	8003386 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032ce:	7ffb      	ldrb	r3, [r7, #31]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d828      	bhi.n	8003326 <UART_SetConfig+0x3aa>
 80032d4:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <UART_SetConfig+0x360>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003301 	.word	0x08003301
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003311 	.word	0x08003311
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003317 	.word	0x08003317
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003327 	.word	0x08003327
 80032f8:	08003327 	.word	0x08003327
 80032fc:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7fe fdbe 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8003304:	61b8      	str	r0, [r7, #24]
        break;
 8003306:	e013      	b.n	8003330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7fe fdce 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 800330c:	61b8      	str	r0, [r7, #24]
        break;
 800330e:	e00f      	b.n	8003330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b4b      	ldr	r3, [pc, #300]	@ (8003440 <UART_SetConfig+0x4c4>)
 8003312:	61bb      	str	r3, [r7, #24]
        break;
 8003314:	e00c      	b.n	8003330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7fe fce1 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 800331a:	61b8      	str	r0, [r7, #24]
        break;
 800331c:	e008      	b.n	8003330 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e004      	b.n	8003330 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	77bb      	strb	r3, [r7, #30]
        break;
 800332e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d074      	beq.n	8003420 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	005a      	lsls	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d916      	bls.n	8003380 <UART_SetConfig+0x404>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d212      	bcs.n	8003380 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f023 030f 	bic.w	r3, r3, #15
 8003362:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	b29a      	uxth	r2, r3
 8003370:	89fb      	ldrh	r3, [r7, #14]
 8003372:	4313      	orrs	r3, r2
 8003374:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	89fa      	ldrh	r2, [r7, #14]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	e04f      	b.n	8003420 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	77bb      	strb	r3, [r7, #30]
 8003384:	e04c      	b.n	8003420 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003386:	7ffb      	ldrb	r3, [r7, #31]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d828      	bhi.n	80033de <UART_SetConfig+0x462>
 800338c:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <UART_SetConfig+0x418>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033df 	.word	0x080033df
 80033a4:	080033cf 	.word	0x080033cf
 80033a8:	080033df 	.word	0x080033df
 80033ac:	080033df 	.word	0x080033df
 80033b0:	080033df 	.word	0x080033df
 80033b4:	080033d7 	.word	0x080033d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7fe fd62 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 80033bc:	61b8      	str	r0, [r7, #24]
        break;
 80033be:	e013      	b.n	80033e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7fe fd72 	bl	8001ea8 <HAL_RCC_GetPCLK2Freq>
 80033c4:	61b8      	str	r0, [r7, #24]
        break;
 80033c6:	e00f      	b.n	80033e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <UART_SetConfig+0x4c4>)
 80033ca:	61bb      	str	r3, [r7, #24]
        break;
 80033cc:	e00c      	b.n	80033e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ce:	f7fe fc85 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 80033d2:	61b8      	str	r0, [r7, #24]
        break;
 80033d4:	e008      	b.n	80033e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033da:	61bb      	str	r3, [r7, #24]
        break;
 80033dc:	e004      	b.n	80033e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	77bb      	strb	r3, [r7, #30]
        break;
 80033e6:	bf00      	nop
    }

    if (pclk != 0U)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	085a      	lsrs	r2, r3, #1
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	441a      	add	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d909      	bls.n	800341c <UART_SetConfig+0x4a0>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340e:	d205      	bcs.n	800341c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	e001      	b.n	8003420 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800342c:	7fbb      	ldrb	r3, [r7, #30]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40007c00 	.word	0x40007c00
 800343c:	40023800 	.word	0x40023800
 8003440:	00f42400 	.word	0x00f42400

08003444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01a      	beq.n	800355a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003542:	d10a      	bne.n	800355a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b098      	sub	sp, #96	@ 0x60
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003598:	f7fd fc0e 	bl	8000db8 <HAL_GetTick>
 800359c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d12e      	bne.n	800360a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f88c 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d021      	beq.n	800360a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035da:	653b      	str	r3, [r7, #80]	@ 0x50
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e6      	bne.n	80035c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e062      	b.n	80036d0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d149      	bne.n	80036ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f856 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03c      	beq.n	80036ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	623b      	str	r3, [r7, #32]
   return(result);
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003650:	633b      	str	r3, [r7, #48]	@ 0x30
 8003652:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	60fb      	str	r3, [r7, #12]
   return(result);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003684:	61fa      	str	r2, [r7, #28]
 8003686:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	69b9      	ldr	r1, [r7, #24]
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	617b      	str	r3, [r7, #20]
   return(result);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e011      	b.n	80036d0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3758      	adds	r7, #88	@ 0x58
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e8:	e04f      	b.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d04b      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f2:	f7fd fb61 	bl	8000db8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d302      	bcc.n	8003708 <UART_WaitOnFlagUntilTimeout+0x30>
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e04e      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d037      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b80      	cmp	r3, #128	@ 0x80
 800371e:	d034      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b40      	cmp	r3, #64	@ 0x40
 8003724:	d031      	beq.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d110      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2208      	movs	r2, #8
 800373a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f8ff 	bl	8003940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2208      	movs	r2, #8
 8003746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e029      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003764:	d111      	bne.n	800378a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800376e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f8e5 	bl	8003940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e00f      	b.n	80037aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4013      	ands	r3, r2
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d0a0      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b097      	sub	sp, #92	@ 0x5c
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e6:	d10e      	bne.n	8003806 <UART_Start_Receive_IT+0x52>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <UART_Start_Receive_IT+0x48>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80037f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80037fa:	e02d      	b.n	8003858 <UART_Start_Receive_IT+0xa4>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	22ff      	movs	r2, #255	@ 0xff
 8003800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003804:	e028      	b.n	8003858 <UART_Start_Receive_IT+0xa4>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10d      	bne.n	800382a <UART_Start_Receive_IT+0x76>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <UART_Start_Receive_IT+0x6c>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	22ff      	movs	r2, #255	@ 0xff
 800381a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800381e:	e01b      	b.n	8003858 <UART_Start_Receive_IT+0xa4>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	227f      	movs	r2, #127	@ 0x7f
 8003824:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003828:	e016      	b.n	8003858 <UART_Start_Receive_IT+0xa4>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003832:	d10d      	bne.n	8003850 <UART_Start_Receive_IT+0x9c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <UART_Start_Receive_IT+0x92>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	227f      	movs	r2, #127	@ 0x7f
 8003840:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003844:	e008      	b.n	8003858 <UART_Start_Receive_IT+0xa4>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	223f      	movs	r2, #63	@ 0x3f
 800384a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800384e:	e003      	b.n	8003858 <UART_Start_Receive_IT+0xa4>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2222      	movs	r2, #34	@ 0x22
 8003864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3308      	adds	r3, #8
 8003886:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003888:	64ba      	str	r2, [r7, #72]	@ 0x48
 800388a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800388e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a4:	d107      	bne.n	80038b6 <UART_Start_Receive_IT+0x102>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a21      	ldr	r2, [pc, #132]	@ (8003938 <UART_Start_Receive_IT+0x184>)
 80038b2:	669a      	str	r2, [r3, #104]	@ 0x68
 80038b4:	e002      	b.n	80038bc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a20      	ldr	r2, [pc, #128]	@ (800393c <UART_Start_Receive_IT+0x188>)
 80038ba:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d019      	beq.n	80038f8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80038d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e6      	bne.n	80038c4 <UART_Start_Receive_IT+0x110>
 80038f6:	e018      	b.n	800392a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	613b      	str	r3, [r7, #16]
   return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f043 0320 	orr.w	r3, r3, #32
 800390c:	653b      	str	r3, [r7, #80]	@ 0x50
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	69f9      	ldr	r1, [r7, #28]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	61bb      	str	r3, [r7, #24]
   return(result);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e6      	bne.n	80038f8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	375c      	adds	r7, #92	@ 0x5c
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	08003c31 	.word	0x08003c31
 800393c:	08003a89 	.word	0x08003a89

08003940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003940:	b480      	push	{r7}
 8003942:	b095      	sub	sp, #84	@ 0x54
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800395c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003966:	643b      	str	r3, [r7, #64]	@ 0x40
 8003968:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800396c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e6      	bne.n	8003948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3308      	adds	r3, #8
 8003980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	61fb      	str	r3, [r7, #28]
   return(result);
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800399a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800399c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039a2:	e841 2300 	strex	r3, r2, [r1]
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e5      	bne.n	800397a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d118      	bne.n	80039e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f023 0310 	bic.w	r3, r3, #16
 80039ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	613b      	str	r3, [r7, #16]
   return(result);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e6      	bne.n	80039b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80039fc:	bf00      	nop
 80039fe:	3754      	adds	r7, #84	@ 0x54
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff fa88 	bl	8002f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6979      	ldr	r1, [r7, #20]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	613b      	str	r3, [r7, #16]
   return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fa54 	bl	8002f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a80:	bf00      	nop
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b09c      	sub	sp, #112	@ 0x70
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aa0:	2b22      	cmp	r3, #34	@ 0x22
 8003aa2:	f040 80b9 	bne.w	8003c18 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ab0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ab4:	b2d9      	uxtb	r1, r3
 8003ab6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 809c 	bne.w	8003c28 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e6      	bne.n	8003af0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b42:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d018      	beq.n	8003baa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	623b      	str	r3, [r7, #32]
   return(result);
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b96:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e6      	bne.n	8003b78 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d12e      	bne.n	8003c10 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f023 0310 	bic.w	r3, r3, #16
 8003bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	617b      	str	r3, [r7, #20]
   return(result);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d103      	bne.n	8003c00 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c06:	4619      	mov	r1, r3
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff f9a1 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c0e:	e00b      	b.n	8003c28 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7fc fe07 	bl	8000824 <HAL_UART_RxCpltCallback>
}
 8003c16:	e007      	b.n	8003c28 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0208 	orr.w	r2, r2, #8
 8003c26:	619a      	str	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	3770      	adds	r7, #112	@ 0x70
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b09c      	sub	sp, #112	@ 0x70
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c48:	2b22      	cmp	r3, #34	@ 0x22
 8003c4a:	f040 80b9 	bne.w	8003dc0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003c62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c66:	4013      	ands	r3, r2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c72:	1c9a      	adds	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 809c 	bne.w	8003dd0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cac:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cb8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003cbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e6      	bne.n	8003c98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003cea:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d018      	beq.n	8003d52 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e6      	bne.n	8003d20 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d12e      	bne.n	8003db8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f023 0310 	bic.w	r3, r3, #16
 8003d74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d103      	bne.n	8003da8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2210      	movs	r2, #16
 8003da6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff f8cd 	bl	8002f50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003db6:	e00b      	b.n	8003dd0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fc fd33 	bl	8000824 <HAL_UART_RxCpltCallback>
}
 8003dbe:	e007      	b.n	8003dd0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0208 	orr.w	r2, r2, #8
 8003dce:	619a      	str	r2, [r3, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	3770      	adds	r7, #112	@ 0x70
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <siprintf>:
 8003dd8:	b40e      	push	{r1, r2, r3}
 8003dda:	b500      	push	{lr}
 8003ddc:	b09c      	sub	sp, #112	@ 0x70
 8003dde:	ab1d      	add	r3, sp, #116	@ 0x74
 8003de0:	9002      	str	r0, [sp, #8]
 8003de2:	9006      	str	r0, [sp, #24]
 8003de4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003de8:	4809      	ldr	r0, [pc, #36]	@ (8003e10 <siprintf+0x38>)
 8003dea:	9107      	str	r1, [sp, #28]
 8003dec:	9104      	str	r1, [sp, #16]
 8003dee:	4909      	ldr	r1, [pc, #36]	@ (8003e14 <siprintf+0x3c>)
 8003df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df4:	9105      	str	r1, [sp, #20]
 8003df6:	6800      	ldr	r0, [r0, #0]
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	a902      	add	r1, sp, #8
 8003dfc:	f000 f994 	bl	8004128 <_svfiprintf_r>
 8003e00:	9b02      	ldr	r3, [sp, #8]
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	b01c      	add	sp, #112	@ 0x70
 8003e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e0c:	b003      	add	sp, #12
 8003e0e:	4770      	bx	lr
 8003e10:	20000010 	.word	0x20000010
 8003e14:	ffff0208 	.word	0xffff0208

08003e18 <memset>:
 8003e18:	4402      	add	r2, r0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <__errno>:
 8003e28:	4b01      	ldr	r3, [pc, #4]	@ (8003e30 <__errno+0x8>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000010 	.word	0x20000010

08003e34 <__libc_init_array>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4d0d      	ldr	r5, [pc, #52]	@ (8003e6c <__libc_init_array+0x38>)
 8003e38:	4c0d      	ldr	r4, [pc, #52]	@ (8003e70 <__libc_init_array+0x3c>)
 8003e3a:	1b64      	subs	r4, r4, r5
 8003e3c:	10a4      	asrs	r4, r4, #2
 8003e3e:	2600      	movs	r6, #0
 8003e40:	42a6      	cmp	r6, r4
 8003e42:	d109      	bne.n	8003e58 <__libc_init_array+0x24>
 8003e44:	4d0b      	ldr	r5, [pc, #44]	@ (8003e74 <__libc_init_array+0x40>)
 8003e46:	4c0c      	ldr	r4, [pc, #48]	@ (8003e78 <__libc_init_array+0x44>)
 8003e48:	f000 fc66 	bl	8004718 <_init>
 8003e4c:	1b64      	subs	r4, r4, r5
 8003e4e:	10a4      	asrs	r4, r4, #2
 8003e50:	2600      	movs	r6, #0
 8003e52:	42a6      	cmp	r6, r4
 8003e54:	d105      	bne.n	8003e62 <__libc_init_array+0x2e>
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
 8003e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5c:	4798      	blx	r3
 8003e5e:	3601      	adds	r6, #1
 8003e60:	e7ee      	b.n	8003e40 <__libc_init_array+0xc>
 8003e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e66:	4798      	blx	r3
 8003e68:	3601      	adds	r6, #1
 8003e6a:	e7f2      	b.n	8003e52 <__libc_init_array+0x1e>
 8003e6c:	080047d0 	.word	0x080047d0
 8003e70:	080047d0 	.word	0x080047d0
 8003e74:	080047d0 	.word	0x080047d0
 8003e78:	080047d4 	.word	0x080047d4

08003e7c <__retarget_lock_acquire_recursive>:
 8003e7c:	4770      	bx	lr

08003e7e <__retarget_lock_release_recursive>:
 8003e7e:	4770      	bx	lr

08003e80 <_free_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	2900      	cmp	r1, #0
 8003e86:	d041      	beq.n	8003f0c <_free_r+0x8c>
 8003e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8c:	1f0c      	subs	r4, r1, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfb8      	it	lt
 8003e92:	18e4      	addlt	r4, r4, r3
 8003e94:	f000 f8e0 	bl	8004058 <__malloc_lock>
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <_free_r+0x90>)
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	b933      	cbnz	r3, 8003eac <_free_r+0x2c>
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	6014      	str	r4, [r2, #0]
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea8:	f000 b8dc 	b.w	8004064 <__malloc_unlock>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d908      	bls.n	8003ec2 <_free_r+0x42>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	1821      	adds	r1, r4, r0
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf01      	itttt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	1809      	addeq	r1, r1, r0
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	e7ed      	b.n	8003e9e <_free_r+0x1e>
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b10b      	cbz	r3, 8003ecc <_free_r+0x4c>
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	d9fa      	bls.n	8003ec2 <_free_r+0x42>
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	1850      	adds	r0, r2, r1
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d10b      	bne.n	8003eec <_free_r+0x6c>
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	4401      	add	r1, r0
 8003ed8:	1850      	adds	r0, r2, r1
 8003eda:	4283      	cmp	r3, r0
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	d1e0      	bne.n	8003ea2 <_free_r+0x22>
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	6053      	str	r3, [r2, #4]
 8003ee6:	4408      	add	r0, r1
 8003ee8:	6010      	str	r0, [r2, #0]
 8003eea:	e7da      	b.n	8003ea2 <_free_r+0x22>
 8003eec:	d902      	bls.n	8003ef4 <_free_r+0x74>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	602b      	str	r3, [r5, #0]
 8003ef2:	e7d6      	b.n	8003ea2 <_free_r+0x22>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	1821      	adds	r1, r4, r0
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf04      	itt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	6063      	str	r3, [r4, #4]
 8003f02:	bf04      	itt	eq
 8003f04:	1809      	addeq	r1, r1, r0
 8003f06:	6021      	streq	r1, [r4, #0]
 8003f08:	6054      	str	r4, [r2, #4]
 8003f0a:	e7ca      	b.n	8003ea2 <_free_r+0x22>
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	bf00      	nop
 8003f10:	200002f0 	.word	0x200002f0

08003f14 <sbrk_aligned>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	4e0f      	ldr	r6, [pc, #60]	@ (8003f54 <sbrk_aligned+0x40>)
 8003f18:	460c      	mov	r4, r1
 8003f1a:	6831      	ldr	r1, [r6, #0]
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	b911      	cbnz	r1, 8003f26 <sbrk_aligned+0x12>
 8003f20:	f000 fba6 	bl	8004670 <_sbrk_r>
 8003f24:	6030      	str	r0, [r6, #0]
 8003f26:	4621      	mov	r1, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 fba1 	bl	8004670 <_sbrk_r>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	d103      	bne.n	8003f3a <sbrk_aligned+0x26>
 8003f32:	f04f 34ff 	mov.w	r4, #4294967295
 8003f36:	4620      	mov	r0, r4
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
 8003f3a:	1cc4      	adds	r4, r0, #3
 8003f3c:	f024 0403 	bic.w	r4, r4, #3
 8003f40:	42a0      	cmp	r0, r4
 8003f42:	d0f8      	beq.n	8003f36 <sbrk_aligned+0x22>
 8003f44:	1a21      	subs	r1, r4, r0
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 fb92 	bl	8004670 <_sbrk_r>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d1f2      	bne.n	8003f36 <sbrk_aligned+0x22>
 8003f50:	e7ef      	b.n	8003f32 <sbrk_aligned+0x1e>
 8003f52:	bf00      	nop
 8003f54:	200002ec 	.word	0x200002ec

08003f58 <_malloc_r>:
 8003f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	1ccd      	adds	r5, r1, #3
 8003f5e:	f025 0503 	bic.w	r5, r5, #3
 8003f62:	3508      	adds	r5, #8
 8003f64:	2d0c      	cmp	r5, #12
 8003f66:	bf38      	it	cc
 8003f68:	250c      	movcc	r5, #12
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	db01      	blt.n	8003f74 <_malloc_r+0x1c>
 8003f70:	42a9      	cmp	r1, r5
 8003f72:	d904      	bls.n	8003f7e <_malloc_r+0x26>
 8003f74:	230c      	movs	r3, #12
 8003f76:	6033      	str	r3, [r6, #0]
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004054 <_malloc_r+0xfc>
 8003f82:	f000 f869 	bl	8004058 <__malloc_lock>
 8003f86:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8a:	461c      	mov	r4, r3
 8003f8c:	bb44      	cbnz	r4, 8003fe0 <_malloc_r+0x88>
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ffbf 	bl	8003f14 <sbrk_aligned>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	4604      	mov	r4, r0
 8003f9a:	d158      	bne.n	800404e <_malloc_r+0xf6>
 8003f9c:	f8d8 4000 	ldr.w	r4, [r8]
 8003fa0:	4627      	mov	r7, r4
 8003fa2:	2f00      	cmp	r7, #0
 8003fa4:	d143      	bne.n	800402e <_malloc_r+0xd6>
 8003fa6:	2c00      	cmp	r4, #0
 8003fa8:	d04b      	beq.n	8004042 <_malloc_r+0xea>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	4639      	mov	r1, r7
 8003fae:	4630      	mov	r0, r6
 8003fb0:	eb04 0903 	add.w	r9, r4, r3
 8003fb4:	f000 fb5c 	bl	8004670 <_sbrk_r>
 8003fb8:	4581      	cmp	r9, r0
 8003fba:	d142      	bne.n	8004042 <_malloc_r+0xea>
 8003fbc:	6821      	ldr	r1, [r4, #0]
 8003fbe:	1a6d      	subs	r5, r5, r1
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff ffa6 	bl	8003f14 <sbrk_aligned>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d03a      	beq.n	8004042 <_malloc_r+0xea>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	442b      	add	r3, r5
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	bb62      	cbnz	r2, 8004034 <_malloc_r+0xdc>
 8003fda:	f8c8 7000 	str.w	r7, [r8]
 8003fde:	e00f      	b.n	8004000 <_malloc_r+0xa8>
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	1b52      	subs	r2, r2, r5
 8003fe4:	d420      	bmi.n	8004028 <_malloc_r+0xd0>
 8003fe6:	2a0b      	cmp	r2, #11
 8003fe8:	d917      	bls.n	800401a <_malloc_r+0xc2>
 8003fea:	1961      	adds	r1, r4, r5
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	6025      	str	r5, [r4, #0]
 8003ff0:	bf18      	it	ne
 8003ff2:	6059      	strne	r1, [r3, #4]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	bf08      	it	eq
 8003ff8:	f8c8 1000 	streq.w	r1, [r8]
 8003ffc:	5162      	str	r2, [r4, r5]
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	4630      	mov	r0, r6
 8004002:	f000 f82f 	bl	8004064 <__malloc_unlock>
 8004006:	f104 000b 	add.w	r0, r4, #11
 800400a:	1d23      	adds	r3, r4, #4
 800400c:	f020 0007 	bic.w	r0, r0, #7
 8004010:	1ac2      	subs	r2, r0, r3
 8004012:	bf1c      	itt	ne
 8004014:	1a1b      	subne	r3, r3, r0
 8004016:	50a3      	strne	r3, [r4, r2]
 8004018:	e7af      	b.n	8003f7a <_malloc_r+0x22>
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	42a3      	cmp	r3, r4
 800401e:	bf0c      	ite	eq
 8004020:	f8c8 2000 	streq.w	r2, [r8]
 8004024:	605a      	strne	r2, [r3, #4]
 8004026:	e7eb      	b.n	8004000 <_malloc_r+0xa8>
 8004028:	4623      	mov	r3, r4
 800402a:	6864      	ldr	r4, [r4, #4]
 800402c:	e7ae      	b.n	8003f8c <_malloc_r+0x34>
 800402e:	463c      	mov	r4, r7
 8004030:	687f      	ldr	r7, [r7, #4]
 8004032:	e7b6      	b.n	8003fa2 <_malloc_r+0x4a>
 8004034:	461a      	mov	r2, r3
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	42a3      	cmp	r3, r4
 800403a:	d1fb      	bne.n	8004034 <_malloc_r+0xdc>
 800403c:	2300      	movs	r3, #0
 800403e:	6053      	str	r3, [r2, #4]
 8004040:	e7de      	b.n	8004000 <_malloc_r+0xa8>
 8004042:	230c      	movs	r3, #12
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	4630      	mov	r0, r6
 8004048:	f000 f80c 	bl	8004064 <__malloc_unlock>
 800404c:	e794      	b.n	8003f78 <_malloc_r+0x20>
 800404e:	6005      	str	r5, [r0, #0]
 8004050:	e7d6      	b.n	8004000 <_malloc_r+0xa8>
 8004052:	bf00      	nop
 8004054:	200002f0 	.word	0x200002f0

08004058 <__malloc_lock>:
 8004058:	4801      	ldr	r0, [pc, #4]	@ (8004060 <__malloc_lock+0x8>)
 800405a:	f7ff bf0f 	b.w	8003e7c <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	200002e8 	.word	0x200002e8

08004064 <__malloc_unlock>:
 8004064:	4801      	ldr	r0, [pc, #4]	@ (800406c <__malloc_unlock+0x8>)
 8004066:	f7ff bf0a 	b.w	8003e7e <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	200002e8 	.word	0x200002e8

08004070 <__ssputs_r>:
 8004070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	688e      	ldr	r6, [r1, #8]
 8004076:	461f      	mov	r7, r3
 8004078:	42be      	cmp	r6, r7
 800407a:	680b      	ldr	r3, [r1, #0]
 800407c:	4682      	mov	sl, r0
 800407e:	460c      	mov	r4, r1
 8004080:	4690      	mov	r8, r2
 8004082:	d82d      	bhi.n	80040e0 <__ssputs_r+0x70>
 8004084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004088:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800408c:	d026      	beq.n	80040dc <__ssputs_r+0x6c>
 800408e:	6965      	ldr	r5, [r4, #20]
 8004090:	6909      	ldr	r1, [r1, #16]
 8004092:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004096:	eba3 0901 	sub.w	r9, r3, r1
 800409a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800409e:	1c7b      	adds	r3, r7, #1
 80040a0:	444b      	add	r3, r9
 80040a2:	106d      	asrs	r5, r5, #1
 80040a4:	429d      	cmp	r5, r3
 80040a6:	bf38      	it	cc
 80040a8:	461d      	movcc	r5, r3
 80040aa:	0553      	lsls	r3, r2, #21
 80040ac:	d527      	bpl.n	80040fe <__ssputs_r+0x8e>
 80040ae:	4629      	mov	r1, r5
 80040b0:	f7ff ff52 	bl	8003f58 <_malloc_r>
 80040b4:	4606      	mov	r6, r0
 80040b6:	b360      	cbz	r0, 8004112 <__ssputs_r+0xa2>
 80040b8:	6921      	ldr	r1, [r4, #16]
 80040ba:	464a      	mov	r2, r9
 80040bc:	f000 fae8 	bl	8004690 <memcpy>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	6126      	str	r6, [r4, #16]
 80040ce:	6165      	str	r5, [r4, #20]
 80040d0:	444e      	add	r6, r9
 80040d2:	eba5 0509 	sub.w	r5, r5, r9
 80040d6:	6026      	str	r6, [r4, #0]
 80040d8:	60a5      	str	r5, [r4, #8]
 80040da:	463e      	mov	r6, r7
 80040dc:	42be      	cmp	r6, r7
 80040de:	d900      	bls.n	80040e2 <__ssputs_r+0x72>
 80040e0:	463e      	mov	r6, r7
 80040e2:	6820      	ldr	r0, [r4, #0]
 80040e4:	4632      	mov	r2, r6
 80040e6:	4641      	mov	r1, r8
 80040e8:	f000 faa8 	bl	800463c <memmove>
 80040ec:	68a3      	ldr	r3, [r4, #8]
 80040ee:	1b9b      	subs	r3, r3, r6
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	4433      	add	r3, r6
 80040f6:	6023      	str	r3, [r4, #0]
 80040f8:	2000      	movs	r0, #0
 80040fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fe:	462a      	mov	r2, r5
 8004100:	f000 fad4 	bl	80046ac <_realloc_r>
 8004104:	4606      	mov	r6, r0
 8004106:	2800      	cmp	r0, #0
 8004108:	d1e0      	bne.n	80040cc <__ssputs_r+0x5c>
 800410a:	6921      	ldr	r1, [r4, #16]
 800410c:	4650      	mov	r0, sl
 800410e:	f7ff feb7 	bl	8003e80 <_free_r>
 8004112:	230c      	movs	r3, #12
 8004114:	f8ca 3000 	str.w	r3, [sl]
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	e7e9      	b.n	80040fa <__ssputs_r+0x8a>
	...

08004128 <_svfiprintf_r>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	4698      	mov	r8, r3
 800412e:	898b      	ldrh	r3, [r1, #12]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	b09d      	sub	sp, #116	@ 0x74
 8004134:	4607      	mov	r7, r0
 8004136:	460d      	mov	r5, r1
 8004138:	4614      	mov	r4, r2
 800413a:	d510      	bpl.n	800415e <_svfiprintf_r+0x36>
 800413c:	690b      	ldr	r3, [r1, #16]
 800413e:	b973      	cbnz	r3, 800415e <_svfiprintf_r+0x36>
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	f7ff ff09 	bl	8003f58 <_malloc_r>
 8004146:	6028      	str	r0, [r5, #0]
 8004148:	6128      	str	r0, [r5, #16]
 800414a:	b930      	cbnz	r0, 800415a <_svfiprintf_r+0x32>
 800414c:	230c      	movs	r3, #12
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b01d      	add	sp, #116	@ 0x74
 8004156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415a:	2340      	movs	r3, #64	@ 0x40
 800415c:	616b      	str	r3, [r5, #20]
 800415e:	2300      	movs	r3, #0
 8004160:	9309      	str	r3, [sp, #36]	@ 0x24
 8004162:	2320      	movs	r3, #32
 8004164:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004168:	f8cd 800c 	str.w	r8, [sp, #12]
 800416c:	2330      	movs	r3, #48	@ 0x30
 800416e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800430c <_svfiprintf_r+0x1e4>
 8004172:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004176:	f04f 0901 	mov.w	r9, #1
 800417a:	4623      	mov	r3, r4
 800417c:	469a      	mov	sl, r3
 800417e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004182:	b10a      	cbz	r2, 8004188 <_svfiprintf_r+0x60>
 8004184:	2a25      	cmp	r2, #37	@ 0x25
 8004186:	d1f9      	bne.n	800417c <_svfiprintf_r+0x54>
 8004188:	ebba 0b04 	subs.w	fp, sl, r4
 800418c:	d00b      	beq.n	80041a6 <_svfiprintf_r+0x7e>
 800418e:	465b      	mov	r3, fp
 8004190:	4622      	mov	r2, r4
 8004192:	4629      	mov	r1, r5
 8004194:	4638      	mov	r0, r7
 8004196:	f7ff ff6b 	bl	8004070 <__ssputs_r>
 800419a:	3001      	adds	r0, #1
 800419c:	f000 80a7 	beq.w	80042ee <_svfiprintf_r+0x1c6>
 80041a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041a2:	445a      	add	r2, fp
 80041a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80041a6:	f89a 3000 	ldrb.w	r3, [sl]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 809f 	beq.w	80042ee <_svfiprintf_r+0x1c6>
 80041b0:	2300      	movs	r3, #0
 80041b2:	f04f 32ff 	mov.w	r2, #4294967295
 80041b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ba:	f10a 0a01 	add.w	sl, sl, #1
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	9307      	str	r3, [sp, #28]
 80041c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80041c8:	4654      	mov	r4, sl
 80041ca:	2205      	movs	r2, #5
 80041cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d0:	484e      	ldr	r0, [pc, #312]	@ (800430c <_svfiprintf_r+0x1e4>)
 80041d2:	f7fc f83d 	bl	8000250 <memchr>
 80041d6:	9a04      	ldr	r2, [sp, #16]
 80041d8:	b9d8      	cbnz	r0, 8004212 <_svfiprintf_r+0xea>
 80041da:	06d0      	lsls	r0, r2, #27
 80041dc:	bf44      	itt	mi
 80041de:	2320      	movmi	r3, #32
 80041e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041e4:	0711      	lsls	r1, r2, #28
 80041e6:	bf44      	itt	mi
 80041e8:	232b      	movmi	r3, #43	@ 0x2b
 80041ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041ee:	f89a 3000 	ldrb.w	r3, [sl]
 80041f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f4:	d015      	beq.n	8004222 <_svfiprintf_r+0xfa>
 80041f6:	9a07      	ldr	r2, [sp, #28]
 80041f8:	4654      	mov	r4, sl
 80041fa:	2000      	movs	r0, #0
 80041fc:	f04f 0c0a 	mov.w	ip, #10
 8004200:	4621      	mov	r1, r4
 8004202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004206:	3b30      	subs	r3, #48	@ 0x30
 8004208:	2b09      	cmp	r3, #9
 800420a:	d94b      	bls.n	80042a4 <_svfiprintf_r+0x17c>
 800420c:	b1b0      	cbz	r0, 800423c <_svfiprintf_r+0x114>
 800420e:	9207      	str	r2, [sp, #28]
 8004210:	e014      	b.n	800423c <_svfiprintf_r+0x114>
 8004212:	eba0 0308 	sub.w	r3, r0, r8
 8004216:	fa09 f303 	lsl.w	r3, r9, r3
 800421a:	4313      	orrs	r3, r2
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	46a2      	mov	sl, r4
 8004220:	e7d2      	b.n	80041c8 <_svfiprintf_r+0xa0>
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	1d19      	adds	r1, r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	9103      	str	r1, [sp, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfbb      	ittet	lt
 800422e:	425b      	neglt	r3, r3
 8004230:	f042 0202 	orrlt.w	r2, r2, #2
 8004234:	9307      	strge	r3, [sp, #28]
 8004236:	9307      	strlt	r3, [sp, #28]
 8004238:	bfb8      	it	lt
 800423a:	9204      	strlt	r2, [sp, #16]
 800423c:	7823      	ldrb	r3, [r4, #0]
 800423e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004240:	d10a      	bne.n	8004258 <_svfiprintf_r+0x130>
 8004242:	7863      	ldrb	r3, [r4, #1]
 8004244:	2b2a      	cmp	r3, #42	@ 0x2a
 8004246:	d132      	bne.n	80042ae <_svfiprintf_r+0x186>
 8004248:	9b03      	ldr	r3, [sp, #12]
 800424a:	1d1a      	adds	r2, r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	9203      	str	r2, [sp, #12]
 8004250:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004254:	3402      	adds	r4, #2
 8004256:	9305      	str	r3, [sp, #20]
 8004258:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800431c <_svfiprintf_r+0x1f4>
 800425c:	7821      	ldrb	r1, [r4, #0]
 800425e:	2203      	movs	r2, #3
 8004260:	4650      	mov	r0, sl
 8004262:	f7fb fff5 	bl	8000250 <memchr>
 8004266:	b138      	cbz	r0, 8004278 <_svfiprintf_r+0x150>
 8004268:	9b04      	ldr	r3, [sp, #16]
 800426a:	eba0 000a 	sub.w	r0, r0, sl
 800426e:	2240      	movs	r2, #64	@ 0x40
 8004270:	4082      	lsls	r2, r0
 8004272:	4313      	orrs	r3, r2
 8004274:	3401      	adds	r4, #1
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427c:	4824      	ldr	r0, [pc, #144]	@ (8004310 <_svfiprintf_r+0x1e8>)
 800427e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004282:	2206      	movs	r2, #6
 8004284:	f7fb ffe4 	bl	8000250 <memchr>
 8004288:	2800      	cmp	r0, #0
 800428a:	d036      	beq.n	80042fa <_svfiprintf_r+0x1d2>
 800428c:	4b21      	ldr	r3, [pc, #132]	@ (8004314 <_svfiprintf_r+0x1ec>)
 800428e:	bb1b      	cbnz	r3, 80042d8 <_svfiprintf_r+0x1b0>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	3307      	adds	r3, #7
 8004294:	f023 0307 	bic.w	r3, r3, #7
 8004298:	3308      	adds	r3, #8
 800429a:	9303      	str	r3, [sp, #12]
 800429c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429e:	4433      	add	r3, r6
 80042a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a2:	e76a      	b.n	800417a <_svfiprintf_r+0x52>
 80042a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a8:	460c      	mov	r4, r1
 80042aa:	2001      	movs	r0, #1
 80042ac:	e7a8      	b.n	8004200 <_svfiprintf_r+0xd8>
 80042ae:	2300      	movs	r3, #0
 80042b0:	3401      	adds	r4, #1
 80042b2:	9305      	str	r3, [sp, #20]
 80042b4:	4619      	mov	r1, r3
 80042b6:	f04f 0c0a 	mov.w	ip, #10
 80042ba:	4620      	mov	r0, r4
 80042bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c0:	3a30      	subs	r2, #48	@ 0x30
 80042c2:	2a09      	cmp	r2, #9
 80042c4:	d903      	bls.n	80042ce <_svfiprintf_r+0x1a6>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0c6      	beq.n	8004258 <_svfiprintf_r+0x130>
 80042ca:	9105      	str	r1, [sp, #20]
 80042cc:	e7c4      	b.n	8004258 <_svfiprintf_r+0x130>
 80042ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d2:	4604      	mov	r4, r0
 80042d4:	2301      	movs	r3, #1
 80042d6:	e7f0      	b.n	80042ba <_svfiprintf_r+0x192>
 80042d8:	ab03      	add	r3, sp, #12
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	462a      	mov	r2, r5
 80042de:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <_svfiprintf_r+0x1f0>)
 80042e0:	a904      	add	r1, sp, #16
 80042e2:	4638      	mov	r0, r7
 80042e4:	f3af 8000 	nop.w
 80042e8:	1c42      	adds	r2, r0, #1
 80042ea:	4606      	mov	r6, r0
 80042ec:	d1d6      	bne.n	800429c <_svfiprintf_r+0x174>
 80042ee:	89ab      	ldrh	r3, [r5, #12]
 80042f0:	065b      	lsls	r3, r3, #25
 80042f2:	f53f af2d 	bmi.w	8004150 <_svfiprintf_r+0x28>
 80042f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042f8:	e72c      	b.n	8004154 <_svfiprintf_r+0x2c>
 80042fa:	ab03      	add	r3, sp, #12
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	462a      	mov	r2, r5
 8004300:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <_svfiprintf_r+0x1f0>)
 8004302:	a904      	add	r1, sp, #16
 8004304:	4638      	mov	r0, r7
 8004306:	f000 f879 	bl	80043fc <_printf_i>
 800430a:	e7ed      	b.n	80042e8 <_svfiprintf_r+0x1c0>
 800430c:	08004794 	.word	0x08004794
 8004310:	0800479e 	.word	0x0800479e
 8004314:	00000000 	.word	0x00000000
 8004318:	08004071 	.word	0x08004071
 800431c:	0800479a 	.word	0x0800479a

08004320 <_printf_common>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	4616      	mov	r6, r2
 8004326:	4698      	mov	r8, r3
 8004328:	688a      	ldr	r2, [r1, #8]
 800432a:	690b      	ldr	r3, [r1, #16]
 800432c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004330:	4293      	cmp	r3, r2
 8004332:	bfb8      	it	lt
 8004334:	4613      	movlt	r3, r2
 8004336:	6033      	str	r3, [r6, #0]
 8004338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800433c:	4607      	mov	r7, r0
 800433e:	460c      	mov	r4, r1
 8004340:	b10a      	cbz	r2, 8004346 <_printf_common+0x26>
 8004342:	3301      	adds	r3, #1
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	6833      	ldrmi	r3, [r6, #0]
 800434e:	3302      	addmi	r3, #2
 8004350:	6033      	strmi	r3, [r6, #0]
 8004352:	6825      	ldr	r5, [r4, #0]
 8004354:	f015 0506 	ands.w	r5, r5, #6
 8004358:	d106      	bne.n	8004368 <_printf_common+0x48>
 800435a:	f104 0a19 	add.w	sl, r4, #25
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	6832      	ldr	r2, [r6, #0]
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	42ab      	cmp	r3, r5
 8004366:	dc26      	bgt.n	80043b6 <_printf_common+0x96>
 8004368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	3b00      	subs	r3, #0
 8004370:	bf18      	it	ne
 8004372:	2301      	movne	r3, #1
 8004374:	0692      	lsls	r2, r2, #26
 8004376:	d42b      	bmi.n	80043d0 <_printf_common+0xb0>
 8004378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800437c:	4641      	mov	r1, r8
 800437e:	4638      	mov	r0, r7
 8004380:	47c8      	blx	r9
 8004382:	3001      	adds	r0, #1
 8004384:	d01e      	beq.n	80043c4 <_printf_common+0xa4>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	6922      	ldr	r2, [r4, #16]
 800438a:	f003 0306 	and.w	r3, r3, #6
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf02      	ittt	eq
 8004392:	68e5      	ldreq	r5, [r4, #12]
 8004394:	6833      	ldreq	r3, [r6, #0]
 8004396:	1aed      	subeq	r5, r5, r3
 8004398:	68a3      	ldr	r3, [r4, #8]
 800439a:	bf0c      	ite	eq
 800439c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a0:	2500      	movne	r5, #0
 80043a2:	4293      	cmp	r3, r2
 80043a4:	bfc4      	itt	gt
 80043a6:	1a9b      	subgt	r3, r3, r2
 80043a8:	18ed      	addgt	r5, r5, r3
 80043aa:	2600      	movs	r6, #0
 80043ac:	341a      	adds	r4, #26
 80043ae:	42b5      	cmp	r5, r6
 80043b0:	d11a      	bne.n	80043e8 <_printf_common+0xc8>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e008      	b.n	80043c8 <_printf_common+0xa8>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	4641      	mov	r1, r8
 80043bc:	4638      	mov	r0, r7
 80043be:	47c8      	blx	r9
 80043c0:	3001      	adds	r0, #1
 80043c2:	d103      	bne.n	80043cc <_printf_common+0xac>
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	3501      	adds	r5, #1
 80043ce:	e7c6      	b.n	800435e <_printf_common+0x3e>
 80043d0:	18e1      	adds	r1, r4, r3
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	2030      	movs	r0, #48	@ 0x30
 80043d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043da:	4422      	add	r2, r4
 80043dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043e4:	3302      	adds	r3, #2
 80043e6:	e7c7      	b.n	8004378 <_printf_common+0x58>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4622      	mov	r2, r4
 80043ec:	4641      	mov	r1, r8
 80043ee:	4638      	mov	r0, r7
 80043f0:	47c8      	blx	r9
 80043f2:	3001      	adds	r0, #1
 80043f4:	d0e6      	beq.n	80043c4 <_printf_common+0xa4>
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7d9      	b.n	80043ae <_printf_common+0x8e>
	...

080043fc <_printf_i>:
 80043fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	7e0f      	ldrb	r7, [r1, #24]
 8004402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004404:	2f78      	cmp	r7, #120	@ 0x78
 8004406:	4691      	mov	r9, r2
 8004408:	4680      	mov	r8, r0
 800440a:	460c      	mov	r4, r1
 800440c:	469a      	mov	sl, r3
 800440e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004412:	d807      	bhi.n	8004424 <_printf_i+0x28>
 8004414:	2f62      	cmp	r7, #98	@ 0x62
 8004416:	d80a      	bhi.n	800442e <_printf_i+0x32>
 8004418:	2f00      	cmp	r7, #0
 800441a:	f000 80d2 	beq.w	80045c2 <_printf_i+0x1c6>
 800441e:	2f58      	cmp	r7, #88	@ 0x58
 8004420:	f000 80b9 	beq.w	8004596 <_printf_i+0x19a>
 8004424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800442c:	e03a      	b.n	80044a4 <_printf_i+0xa8>
 800442e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004432:	2b15      	cmp	r3, #21
 8004434:	d8f6      	bhi.n	8004424 <_printf_i+0x28>
 8004436:	a101      	add	r1, pc, #4	@ (adr r1, 800443c <_printf_i+0x40>)
 8004438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800443c:	08004495 	.word	0x08004495
 8004440:	080044a9 	.word	0x080044a9
 8004444:	08004425 	.word	0x08004425
 8004448:	08004425 	.word	0x08004425
 800444c:	08004425 	.word	0x08004425
 8004450:	08004425 	.word	0x08004425
 8004454:	080044a9 	.word	0x080044a9
 8004458:	08004425 	.word	0x08004425
 800445c:	08004425 	.word	0x08004425
 8004460:	08004425 	.word	0x08004425
 8004464:	08004425 	.word	0x08004425
 8004468:	080045a9 	.word	0x080045a9
 800446c:	080044d3 	.word	0x080044d3
 8004470:	08004563 	.word	0x08004563
 8004474:	08004425 	.word	0x08004425
 8004478:	08004425 	.word	0x08004425
 800447c:	080045cb 	.word	0x080045cb
 8004480:	08004425 	.word	0x08004425
 8004484:	080044d3 	.word	0x080044d3
 8004488:	08004425 	.word	0x08004425
 800448c:	08004425 	.word	0x08004425
 8004490:	0800456b 	.word	0x0800456b
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6032      	str	r2, [r6, #0]
 800449c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044a4:	2301      	movs	r3, #1
 80044a6:	e09d      	b.n	80045e4 <_printf_i+0x1e8>
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	6820      	ldr	r0, [r4, #0]
 80044ac:	1d19      	adds	r1, r3, #4
 80044ae:	6031      	str	r1, [r6, #0]
 80044b0:	0606      	lsls	r6, r0, #24
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0xbc>
 80044b4:	681d      	ldr	r5, [r3, #0]
 80044b6:	e003      	b.n	80044c0 <_printf_i+0xc4>
 80044b8:	0645      	lsls	r5, r0, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0xb8>
 80044bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	da03      	bge.n	80044cc <_printf_i+0xd0>
 80044c4:	232d      	movs	r3, #45	@ 0x2d
 80044c6:	426d      	negs	r5, r5
 80044c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044cc:	4859      	ldr	r0, [pc, #356]	@ (8004634 <_printf_i+0x238>)
 80044ce:	230a      	movs	r3, #10
 80044d0:	e011      	b.n	80044f6 <_printf_i+0xfa>
 80044d2:	6821      	ldr	r1, [r4, #0]
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	0608      	lsls	r0, r1, #24
 80044d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80044dc:	d402      	bmi.n	80044e4 <_printf_i+0xe8>
 80044de:	0649      	lsls	r1, r1, #25
 80044e0:	bf48      	it	mi
 80044e2:	b2ad      	uxthmi	r5, r5
 80044e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80044e6:	4853      	ldr	r0, [pc, #332]	@ (8004634 <_printf_i+0x238>)
 80044e8:	6033      	str	r3, [r6, #0]
 80044ea:	bf14      	ite	ne
 80044ec:	230a      	movne	r3, #10
 80044ee:	2308      	moveq	r3, #8
 80044f0:	2100      	movs	r1, #0
 80044f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044f6:	6866      	ldr	r6, [r4, #4]
 80044f8:	60a6      	str	r6, [r4, #8]
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	bfa2      	ittt	ge
 80044fe:	6821      	ldrge	r1, [r4, #0]
 8004500:	f021 0104 	bicge.w	r1, r1, #4
 8004504:	6021      	strge	r1, [r4, #0]
 8004506:	b90d      	cbnz	r5, 800450c <_printf_i+0x110>
 8004508:	2e00      	cmp	r6, #0
 800450a:	d04b      	beq.n	80045a4 <_printf_i+0x1a8>
 800450c:	4616      	mov	r6, r2
 800450e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004512:	fb03 5711 	mls	r7, r3, r1, r5
 8004516:	5dc7      	ldrb	r7, [r0, r7]
 8004518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800451c:	462f      	mov	r7, r5
 800451e:	42bb      	cmp	r3, r7
 8004520:	460d      	mov	r5, r1
 8004522:	d9f4      	bls.n	800450e <_printf_i+0x112>
 8004524:	2b08      	cmp	r3, #8
 8004526:	d10b      	bne.n	8004540 <_printf_i+0x144>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	07df      	lsls	r7, r3, #31
 800452c:	d508      	bpl.n	8004540 <_printf_i+0x144>
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	6861      	ldr	r1, [r4, #4]
 8004532:	4299      	cmp	r1, r3
 8004534:	bfde      	ittt	le
 8004536:	2330      	movle	r3, #48	@ 0x30
 8004538:	f806 3c01 	strble.w	r3, [r6, #-1]
 800453c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004540:	1b92      	subs	r2, r2, r6
 8004542:	6122      	str	r2, [r4, #16]
 8004544:	f8cd a000 	str.w	sl, [sp]
 8004548:	464b      	mov	r3, r9
 800454a:	aa03      	add	r2, sp, #12
 800454c:	4621      	mov	r1, r4
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff fee6 	bl	8004320 <_printf_common>
 8004554:	3001      	adds	r0, #1
 8004556:	d14a      	bne.n	80045ee <_printf_i+0x1f2>
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	b004      	add	sp, #16
 800455e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	f043 0320 	orr.w	r3, r3, #32
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	4833      	ldr	r0, [pc, #204]	@ (8004638 <_printf_i+0x23c>)
 800456c:	2778      	movs	r7, #120	@ 0x78
 800456e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	6831      	ldr	r1, [r6, #0]
 8004576:	061f      	lsls	r7, r3, #24
 8004578:	f851 5b04 	ldr.w	r5, [r1], #4
 800457c:	d402      	bmi.n	8004584 <_printf_i+0x188>
 800457e:	065f      	lsls	r7, r3, #25
 8004580:	bf48      	it	mi
 8004582:	b2ad      	uxthmi	r5, r5
 8004584:	6031      	str	r1, [r6, #0]
 8004586:	07d9      	lsls	r1, r3, #31
 8004588:	bf44      	itt	mi
 800458a:	f043 0320 	orrmi.w	r3, r3, #32
 800458e:	6023      	strmi	r3, [r4, #0]
 8004590:	b11d      	cbz	r5, 800459a <_printf_i+0x19e>
 8004592:	2310      	movs	r3, #16
 8004594:	e7ac      	b.n	80044f0 <_printf_i+0xf4>
 8004596:	4827      	ldr	r0, [pc, #156]	@ (8004634 <_printf_i+0x238>)
 8004598:	e7e9      	b.n	800456e <_printf_i+0x172>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f023 0320 	bic.w	r3, r3, #32
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	e7f6      	b.n	8004592 <_printf_i+0x196>
 80045a4:	4616      	mov	r6, r2
 80045a6:	e7bd      	b.n	8004524 <_printf_i+0x128>
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	6825      	ldr	r5, [r4, #0]
 80045ac:	6961      	ldr	r1, [r4, #20]
 80045ae:	1d18      	adds	r0, r3, #4
 80045b0:	6030      	str	r0, [r6, #0]
 80045b2:	062e      	lsls	r6, r5, #24
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	d501      	bpl.n	80045bc <_printf_i+0x1c0>
 80045b8:	6019      	str	r1, [r3, #0]
 80045ba:	e002      	b.n	80045c2 <_printf_i+0x1c6>
 80045bc:	0668      	lsls	r0, r5, #25
 80045be:	d5fb      	bpl.n	80045b8 <_printf_i+0x1bc>
 80045c0:	8019      	strh	r1, [r3, #0]
 80045c2:	2300      	movs	r3, #0
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	4616      	mov	r6, r2
 80045c8:	e7bc      	b.n	8004544 <_printf_i+0x148>
 80045ca:	6833      	ldr	r3, [r6, #0]
 80045cc:	1d1a      	adds	r2, r3, #4
 80045ce:	6032      	str	r2, [r6, #0]
 80045d0:	681e      	ldr	r6, [r3, #0]
 80045d2:	6862      	ldr	r2, [r4, #4]
 80045d4:	2100      	movs	r1, #0
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7fb fe3a 	bl	8000250 <memchr>
 80045dc:	b108      	cbz	r0, 80045e2 <_printf_i+0x1e6>
 80045de:	1b80      	subs	r0, r0, r6
 80045e0:	6060      	str	r0, [r4, #4]
 80045e2:	6863      	ldr	r3, [r4, #4]
 80045e4:	6123      	str	r3, [r4, #16]
 80045e6:	2300      	movs	r3, #0
 80045e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ec:	e7aa      	b.n	8004544 <_printf_i+0x148>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	4632      	mov	r2, r6
 80045f2:	4649      	mov	r1, r9
 80045f4:	4640      	mov	r0, r8
 80045f6:	47d0      	blx	sl
 80045f8:	3001      	adds	r0, #1
 80045fa:	d0ad      	beq.n	8004558 <_printf_i+0x15c>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	079b      	lsls	r3, r3, #30
 8004600:	d413      	bmi.n	800462a <_printf_i+0x22e>
 8004602:	68e0      	ldr	r0, [r4, #12]
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	4298      	cmp	r0, r3
 8004608:	bfb8      	it	lt
 800460a:	4618      	movlt	r0, r3
 800460c:	e7a6      	b.n	800455c <_printf_i+0x160>
 800460e:	2301      	movs	r3, #1
 8004610:	4632      	mov	r2, r6
 8004612:	4649      	mov	r1, r9
 8004614:	4640      	mov	r0, r8
 8004616:	47d0      	blx	sl
 8004618:	3001      	adds	r0, #1
 800461a:	d09d      	beq.n	8004558 <_printf_i+0x15c>
 800461c:	3501      	adds	r5, #1
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	9903      	ldr	r1, [sp, #12]
 8004622:	1a5b      	subs	r3, r3, r1
 8004624:	42ab      	cmp	r3, r5
 8004626:	dcf2      	bgt.n	800460e <_printf_i+0x212>
 8004628:	e7eb      	b.n	8004602 <_printf_i+0x206>
 800462a:	2500      	movs	r5, #0
 800462c:	f104 0619 	add.w	r6, r4, #25
 8004630:	e7f5      	b.n	800461e <_printf_i+0x222>
 8004632:	bf00      	nop
 8004634:	080047a5 	.word	0x080047a5
 8004638:	080047b6 	.word	0x080047b6

0800463c <memmove>:
 800463c:	4288      	cmp	r0, r1
 800463e:	b510      	push	{r4, lr}
 8004640:	eb01 0402 	add.w	r4, r1, r2
 8004644:	d902      	bls.n	800464c <memmove+0x10>
 8004646:	4284      	cmp	r4, r0
 8004648:	4623      	mov	r3, r4
 800464a:	d807      	bhi.n	800465c <memmove+0x20>
 800464c:	1e43      	subs	r3, r0, #1
 800464e:	42a1      	cmp	r1, r4
 8004650:	d008      	beq.n	8004664 <memmove+0x28>
 8004652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800465a:	e7f8      	b.n	800464e <memmove+0x12>
 800465c:	4402      	add	r2, r0
 800465e:	4601      	mov	r1, r0
 8004660:	428a      	cmp	r2, r1
 8004662:	d100      	bne.n	8004666 <memmove+0x2a>
 8004664:	bd10      	pop	{r4, pc}
 8004666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800466a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800466e:	e7f7      	b.n	8004660 <memmove+0x24>

08004670 <_sbrk_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d06      	ldr	r5, [pc, #24]	@ (800468c <_sbrk_r+0x1c>)
 8004674:	2300      	movs	r3, #0
 8004676:	4604      	mov	r4, r0
 8004678:	4608      	mov	r0, r1
 800467a:	602b      	str	r3, [r5, #0]
 800467c:	f7fc fada 	bl	8000c34 <_sbrk>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_sbrk_r+0x1a>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_sbrk_r+0x1a>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	200002e4 	.word	0x200002e4

08004690 <memcpy>:
 8004690:	440a      	add	r2, r1
 8004692:	4291      	cmp	r1, r2
 8004694:	f100 33ff 	add.w	r3, r0, #4294967295
 8004698:	d100      	bne.n	800469c <memcpy+0xc>
 800469a:	4770      	bx	lr
 800469c:	b510      	push	{r4, lr}
 800469e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a6:	4291      	cmp	r1, r2
 80046a8:	d1f9      	bne.n	800469e <memcpy+0xe>
 80046aa:	bd10      	pop	{r4, pc}

080046ac <_realloc_r>:
 80046ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	4680      	mov	r8, r0
 80046b2:	4615      	mov	r5, r2
 80046b4:	460c      	mov	r4, r1
 80046b6:	b921      	cbnz	r1, 80046c2 <_realloc_r+0x16>
 80046b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046bc:	4611      	mov	r1, r2
 80046be:	f7ff bc4b 	b.w	8003f58 <_malloc_r>
 80046c2:	b92a      	cbnz	r2, 80046d0 <_realloc_r+0x24>
 80046c4:	f7ff fbdc 	bl	8003e80 <_free_r>
 80046c8:	2400      	movs	r4, #0
 80046ca:	4620      	mov	r0, r4
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	f000 f81a 	bl	8004708 <_malloc_usable_size_r>
 80046d4:	4285      	cmp	r5, r0
 80046d6:	4606      	mov	r6, r0
 80046d8:	d802      	bhi.n	80046e0 <_realloc_r+0x34>
 80046da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046de:	d8f4      	bhi.n	80046ca <_realloc_r+0x1e>
 80046e0:	4629      	mov	r1, r5
 80046e2:	4640      	mov	r0, r8
 80046e4:	f7ff fc38 	bl	8003f58 <_malloc_r>
 80046e8:	4607      	mov	r7, r0
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0ec      	beq.n	80046c8 <_realloc_r+0x1c>
 80046ee:	42b5      	cmp	r5, r6
 80046f0:	462a      	mov	r2, r5
 80046f2:	4621      	mov	r1, r4
 80046f4:	bf28      	it	cs
 80046f6:	4632      	movcs	r2, r6
 80046f8:	f7ff ffca 	bl	8004690 <memcpy>
 80046fc:	4621      	mov	r1, r4
 80046fe:	4640      	mov	r0, r8
 8004700:	f7ff fbbe 	bl	8003e80 <_free_r>
 8004704:	463c      	mov	r4, r7
 8004706:	e7e0      	b.n	80046ca <_realloc_r+0x1e>

08004708 <_malloc_usable_size_r>:
 8004708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800470c:	1f18      	subs	r0, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	bfbc      	itt	lt
 8004712:	580b      	ldrlt	r3, [r1, r0]
 8004714:	18c0      	addlt	r0, r0, r3
 8004716:	4770      	bx	lr

08004718 <_init>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr

08004724 <_fini>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr
